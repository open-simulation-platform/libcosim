/**
 * Autogenerated by Thrift Compiler (1.0.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CSE_FMU_SERVICE_HPP
#define CSE_FMU_SERVICE_HPP

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>

#include "service_types.hpp"

namespace fmuproxy {
    namespace thrift {

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning (disable : 4250 ) //inheriting methods via dominance
#endif

        class FmuServiceIf {
        public:
            virtual ~FmuServiceIf() {}

            virtual void getModelDescription(ModelDescription &_return, const FmuId &fmuId) = 0;

            virtual void getCoSimulationAttributes(CoSimulationAttributes &_return, const InstanceId &instanceId) = 0;

            virtual bool canCreateInstanceFromCS(const FmuId &fmuId) = 0;

            virtual bool canCreateInstanceFromME(const FmuId &fmuId) = 0;

            virtual void createInstanceFromCS(InstanceId &_return, const FmuId &fmuId) = 0;

            virtual void createInstanceFromME(InstanceId &_return, const FmuId &fmuId, const Solver &solver) = 0;

            virtual Status::type setupExperiment(const InstanceId &instanceId, const double start, const double stop,
                                                 const double tolerance) = 0;

            virtual Status::type enterInitializationMode(const InstanceId &instanceId) = 0;

            virtual Status::type exitInitializationMode(const InstanceId &instanceId) = 0;

            virtual void step(StepResult &_return, const InstanceId &instanceId, const double stepSize) = 0;

            virtual Status::type reset(const InstanceId &instanceId) = 0;

            virtual Status::type terminate(const InstanceId &instanceId) = 0;

            virtual void readInteger(IntegerRead &_return, const InstanceId &instanceId, const ValueReferences &vr) = 0;

            virtual void readReal(RealRead &_return, const InstanceId &instanceId, const ValueReferences &vr) = 0;

            virtual void readString(StringRead &_return, const InstanceId &instanceId, const ValueReferences &vr) = 0;

            virtual void readBoolean(BooleanRead &_return, const InstanceId &instanceId, const ValueReferences &vr) = 0;

            virtual Status::type
            writeInteger(const InstanceId &instanceId, const ValueReferences &vr, const IntArray &value) = 0;

            virtual Status::type
            writeReal(const InstanceId &instanceId, const ValueReferences &vr, const RealArray &value) = 0;

            virtual Status::type
            writeString(const InstanceId &instanceId, const ValueReferences &vr, const StringArray &value) = 0;

            virtual Status::type
            writeBoolean(const InstanceId &instanceId, const ValueReferences &vr, const BooleanArray &value) = 0;

            virtual void getFMUstate(GetFmuStateResult &_return, const InstanceId &instanceId) = 0;

            virtual Status::type setFMUstate(const InstanceId &instanceId, const FmuState state) = 0;

            virtual Status::type freeFMUstate(const InstanceId &instanceId, const FmuState state) = 0;

            virtual void
            serializeFMUstate(SerializeFmuStateResult &_return, const InstanceId &instanceId, const FmuState state) = 0;

            virtual void deSerializeFMUstate(DeSerializeFmuStateResult &_return, const InstanceId &instanceId,
                                             const std::string &state) = 0;

            virtual void getDirectionalDerivative(DirectionalDerivativeResult &_return, const InstanceId &instanceId,
                                                  const ValueReferences &vUnknownRef, const ValueReferences &vKnownRef,
                                                  const std::vector<double> &dvKnownRef) = 0;
        };

        class FmuServiceIfFactory {
        public:
            typedef FmuServiceIf Handler;

            virtual ~FmuServiceIfFactory() {}

            virtual FmuServiceIf *getHandler(const ::apache::thrift::TConnectionInfo &connInfo) = 0;

            virtual void releaseHandler(FmuServiceIf * /* handler */) = 0;
        };

        class FmuServiceIfSingletonFactory : virtual public FmuServiceIfFactory {
        public:
            FmuServiceIfSingletonFactory(const ::std::shared_ptr<FmuServiceIf> &iface) : iface_(iface) {}

            virtual ~FmuServiceIfSingletonFactory() {}

            virtual FmuServiceIf *getHandler(const ::apache::thrift::TConnectionInfo &) {
                return iface_.get();
            }

            virtual void releaseHandler(FmuServiceIf * /* handler */) {}

        protected:
            ::std::shared_ptr<FmuServiceIf> iface_;
        };

        class FmuServiceNull : virtual public FmuServiceIf {
        public:
            virtual ~FmuServiceNull() {}

            void getModelDescription(ModelDescription & /* _return */, const FmuId & /* fmuId */) {
                return;
            }

            void
            getCoSimulationAttributes(CoSimulationAttributes & /* _return */, const InstanceId & /* instanceId */) {
                return;
            }

            bool canCreateInstanceFromCS(const FmuId & /* fmuId */) {
                bool _return = false;
                return _return;
            }

            bool canCreateInstanceFromME(const FmuId & /* fmuId */) {
                bool _return = false;
                return _return;
            }

            void createInstanceFromCS(InstanceId & /* _return */, const FmuId & /* fmuId */) {
                return;
            }

            void
            createInstanceFromME(InstanceId & /* _return */, const FmuId & /* fmuId */, const Solver & /* solver */) {
                return;
            }

            Status::type
            setupExperiment(const InstanceId & /* instanceId */, const double /* start */, const double /* stop */,
                            const double /* tolerance */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            Status::type enterInitializationMode(const InstanceId & /* instanceId */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            Status::type exitInitializationMode(const InstanceId & /* instanceId */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            void step(StepResult & /* _return */, const InstanceId & /* instanceId */, const double /* stepSize */) {
                return;
            }

            Status::type reset(const InstanceId & /* instanceId */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            Status::type terminate(const InstanceId & /* instanceId */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            void readInteger(IntegerRead & /* _return */, const InstanceId & /* instanceId */,
                             const ValueReferences & /* vr */) {
                return;
            }

            void
            readReal(RealRead & /* _return */, const InstanceId & /* instanceId */, const ValueReferences & /* vr */) {
                return;
            }

            void readString(StringRead & /* _return */, const InstanceId & /* instanceId */,
                            const ValueReferences & /* vr */) {
                return;
            }

            void readBoolean(BooleanRead & /* _return */, const InstanceId & /* instanceId */,
                             const ValueReferences & /* vr */) {
                return;
            }

            Status::type writeInteger(const InstanceId & /* instanceId */, const ValueReferences & /* vr */,
                                      const IntArray & /* value */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            Status::type writeReal(const InstanceId & /* instanceId */, const ValueReferences & /* vr */,
                                   const RealArray & /* value */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            Status::type writeString(const InstanceId & /* instanceId */, const ValueReferences & /* vr */,
                                     const StringArray & /* value */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            Status::type writeBoolean(const InstanceId & /* instanceId */, const ValueReferences & /* vr */,
                                      const BooleanArray & /* value */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            void getFMUstate(GetFmuStateResult & /* _return */, const InstanceId & /* instanceId */) {
                return;
            }

            Status::type setFMUstate(const InstanceId & /* instanceId */, const FmuState /* state */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            Status::type freeFMUstate(const InstanceId & /* instanceId */, const FmuState /* state */) {
                Status::type _return = (Status::type) 0;
                return _return;
            }

            void serializeFMUstate(SerializeFmuStateResult & /* _return */, const InstanceId & /* instanceId */,
                                   const FmuState /* state */) {
                return;
            }

            void deSerializeFMUstate(DeSerializeFmuStateResult & /* _return */, const InstanceId & /* instanceId */,
                                     const std::string & /* state */) {
                return;
            }

            void
            getDirectionalDerivative(DirectionalDerivativeResult & /* _return */, const InstanceId & /* instanceId */,
                                     const ValueReferences & /* vUnknownRef */, const ValueReferences & /* vKnownRef */,
                                     const std::vector<double> & /* dvKnownRef */) {
                return;
            }
        };

        typedef struct _FmuService_getModelDescription_args__isset {
            _FmuService_getModelDescription_args__isset() : fmuId(false) {}

            bool fmuId :1;
        } _FmuService_getModelDescription_args__isset;

        class FmuService_getModelDescription_args {
        public:

            FmuService_getModelDescription_args(const FmuService_getModelDescription_args &);

            FmuService_getModelDescription_args &operator=(const FmuService_getModelDescription_args &);

            FmuService_getModelDescription_args() : fmuId() {
            }

            virtual ~FmuService_getModelDescription_args() noexcept;

            FmuId fmuId;

            _FmuService_getModelDescription_args__isset __isset;

            void __set_fmuId(const FmuId &val);

            bool operator==(const FmuService_getModelDescription_args &rhs) const {
                if (!(fmuId == rhs.fmuId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_getModelDescription_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_getModelDescription_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_getModelDescription_pargs {
        public:


            virtual ~FmuService_getModelDescription_pargs() noexcept;

            const FmuId *fmuId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_getModelDescription_result__isset {
            _FmuService_getModelDescription_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_getModelDescription_result__isset;

        class FmuService_getModelDescription_result {
        public:

            FmuService_getModelDescription_result(const FmuService_getModelDescription_result &);

            FmuService_getModelDescription_result &operator=(const FmuService_getModelDescription_result &);

            FmuService_getModelDescription_result() {
            }

            virtual ~FmuService_getModelDescription_result() noexcept;

            ModelDescription success;
            NoSuchFmuException ex;

            _FmuService_getModelDescription_result__isset __isset;

            void __set_success(const ModelDescription &val);

            void __set_ex(const NoSuchFmuException &val);

            bool operator==(const FmuService_getModelDescription_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_getModelDescription_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_getModelDescription_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_getModelDescription_presult__isset {
            _FmuService_getModelDescription_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_getModelDescription_presult__isset;

        class FmuService_getModelDescription_presult {
        public:


            virtual ~FmuService_getModelDescription_presult() noexcept;

            ModelDescription *success;
            NoSuchFmuException ex;

            _FmuService_getModelDescription_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_getCoSimulationAttributes_args__isset {
            _FmuService_getCoSimulationAttributes_args__isset() : instanceId(false) {}

            bool instanceId :1;
        } _FmuService_getCoSimulationAttributes_args__isset;

        class FmuService_getCoSimulationAttributes_args {
        public:

            FmuService_getCoSimulationAttributes_args(const FmuService_getCoSimulationAttributes_args &);

            FmuService_getCoSimulationAttributes_args &operator=(const FmuService_getCoSimulationAttributes_args &);

            FmuService_getCoSimulationAttributes_args() : instanceId() {
            }

            virtual ~FmuService_getCoSimulationAttributes_args() noexcept;

            InstanceId instanceId;

            _FmuService_getCoSimulationAttributes_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            bool operator==(const FmuService_getCoSimulationAttributes_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_getCoSimulationAttributes_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_getCoSimulationAttributes_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_getCoSimulationAttributes_pargs {
        public:


            virtual ~FmuService_getCoSimulationAttributes_pargs() noexcept;

            const InstanceId *instanceId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_getCoSimulationAttributes_result__isset {
            _FmuService_getCoSimulationAttributes_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_getCoSimulationAttributes_result__isset;

        class FmuService_getCoSimulationAttributes_result {
        public:

            FmuService_getCoSimulationAttributes_result(const FmuService_getCoSimulationAttributes_result &);

            FmuService_getCoSimulationAttributes_result &operator=(const FmuService_getCoSimulationAttributes_result &);

            FmuService_getCoSimulationAttributes_result() {
            }

            virtual ~FmuService_getCoSimulationAttributes_result() noexcept;

            CoSimulationAttributes success;
            NoSuchInstanceException ex;

            _FmuService_getCoSimulationAttributes_result__isset __isset;

            void __set_success(const CoSimulationAttributes &val);

            void __set_ex(const NoSuchInstanceException &val);

            bool operator==(const FmuService_getCoSimulationAttributes_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_getCoSimulationAttributes_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_getCoSimulationAttributes_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_getCoSimulationAttributes_presult__isset {
            _FmuService_getCoSimulationAttributes_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_getCoSimulationAttributes_presult__isset;

        class FmuService_getCoSimulationAttributes_presult {
        public:


            virtual ~FmuService_getCoSimulationAttributes_presult() noexcept;

            CoSimulationAttributes *success;
            NoSuchInstanceException ex;

            _FmuService_getCoSimulationAttributes_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_canCreateInstanceFromCS_args__isset {
            _FmuService_canCreateInstanceFromCS_args__isset() : fmuId(false) {}

            bool fmuId :1;
        } _FmuService_canCreateInstanceFromCS_args__isset;

        class FmuService_canCreateInstanceFromCS_args {
        public:

            FmuService_canCreateInstanceFromCS_args(const FmuService_canCreateInstanceFromCS_args &);

            FmuService_canCreateInstanceFromCS_args &operator=(const FmuService_canCreateInstanceFromCS_args &);

            FmuService_canCreateInstanceFromCS_args() : fmuId() {
            }

            virtual ~FmuService_canCreateInstanceFromCS_args() noexcept;

            FmuId fmuId;

            _FmuService_canCreateInstanceFromCS_args__isset __isset;

            void __set_fmuId(const FmuId &val);

            bool operator==(const FmuService_canCreateInstanceFromCS_args &rhs) const {
                if (!(fmuId == rhs.fmuId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_canCreateInstanceFromCS_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_canCreateInstanceFromCS_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_canCreateInstanceFromCS_pargs {
        public:


            virtual ~FmuService_canCreateInstanceFromCS_pargs() noexcept;

            const FmuId *fmuId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_canCreateInstanceFromCS_result__isset {
            _FmuService_canCreateInstanceFromCS_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_canCreateInstanceFromCS_result__isset;

        class FmuService_canCreateInstanceFromCS_result {
        public:

            FmuService_canCreateInstanceFromCS_result(const FmuService_canCreateInstanceFromCS_result &);

            FmuService_canCreateInstanceFromCS_result &operator=(const FmuService_canCreateInstanceFromCS_result &);

            FmuService_canCreateInstanceFromCS_result() : success(0) {
            }

            virtual ~FmuService_canCreateInstanceFromCS_result() noexcept;

            bool success;
            NoSuchFmuException ex;

            _FmuService_canCreateInstanceFromCS_result__isset __isset;

            void __set_success(const bool val);

            void __set_ex(const NoSuchFmuException &val);

            bool operator==(const FmuService_canCreateInstanceFromCS_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_canCreateInstanceFromCS_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_canCreateInstanceFromCS_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_canCreateInstanceFromCS_presult__isset {
            _FmuService_canCreateInstanceFromCS_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_canCreateInstanceFromCS_presult__isset;

        class FmuService_canCreateInstanceFromCS_presult {
        public:


            virtual ~FmuService_canCreateInstanceFromCS_presult() noexcept;

            bool *success;
            NoSuchFmuException ex;

            _FmuService_canCreateInstanceFromCS_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_canCreateInstanceFromME_args__isset {
            _FmuService_canCreateInstanceFromME_args__isset() : fmuId(false) {}

            bool fmuId :1;
        } _FmuService_canCreateInstanceFromME_args__isset;

        class FmuService_canCreateInstanceFromME_args {
        public:

            FmuService_canCreateInstanceFromME_args(const FmuService_canCreateInstanceFromME_args &);

            FmuService_canCreateInstanceFromME_args &operator=(const FmuService_canCreateInstanceFromME_args &);

            FmuService_canCreateInstanceFromME_args() : fmuId() {
            }

            virtual ~FmuService_canCreateInstanceFromME_args() noexcept;

            FmuId fmuId;

            _FmuService_canCreateInstanceFromME_args__isset __isset;

            void __set_fmuId(const FmuId &val);

            bool operator==(const FmuService_canCreateInstanceFromME_args &rhs) const {
                if (!(fmuId == rhs.fmuId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_canCreateInstanceFromME_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_canCreateInstanceFromME_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_canCreateInstanceFromME_pargs {
        public:


            virtual ~FmuService_canCreateInstanceFromME_pargs() noexcept;

            const FmuId *fmuId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_canCreateInstanceFromME_result__isset {
            _FmuService_canCreateInstanceFromME_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_canCreateInstanceFromME_result__isset;

        class FmuService_canCreateInstanceFromME_result {
        public:

            FmuService_canCreateInstanceFromME_result(const FmuService_canCreateInstanceFromME_result &);

            FmuService_canCreateInstanceFromME_result &operator=(const FmuService_canCreateInstanceFromME_result &);

            FmuService_canCreateInstanceFromME_result() : success(0) {
            }

            virtual ~FmuService_canCreateInstanceFromME_result() noexcept;

            bool success;
            NoSuchFmuException ex;

            _FmuService_canCreateInstanceFromME_result__isset __isset;

            void __set_success(const bool val);

            void __set_ex(const NoSuchFmuException &val);

            bool operator==(const FmuService_canCreateInstanceFromME_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_canCreateInstanceFromME_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_canCreateInstanceFromME_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_canCreateInstanceFromME_presult__isset {
            _FmuService_canCreateInstanceFromME_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_canCreateInstanceFromME_presult__isset;

        class FmuService_canCreateInstanceFromME_presult {
        public:


            virtual ~FmuService_canCreateInstanceFromME_presult() noexcept;

            bool *success;
            NoSuchFmuException ex;

            _FmuService_canCreateInstanceFromME_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_createInstanceFromCS_args__isset {
            _FmuService_createInstanceFromCS_args__isset() : fmuId(false) {}

            bool fmuId :1;
        } _FmuService_createInstanceFromCS_args__isset;

        class FmuService_createInstanceFromCS_args {
        public:

            FmuService_createInstanceFromCS_args(const FmuService_createInstanceFromCS_args &);

            FmuService_createInstanceFromCS_args &operator=(const FmuService_createInstanceFromCS_args &);

            FmuService_createInstanceFromCS_args() : fmuId() {
            }

            virtual ~FmuService_createInstanceFromCS_args() noexcept;

            FmuId fmuId;

            _FmuService_createInstanceFromCS_args__isset __isset;

            void __set_fmuId(const FmuId &val);

            bool operator==(const FmuService_createInstanceFromCS_args &rhs) const {
                if (!(fmuId == rhs.fmuId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_createInstanceFromCS_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_createInstanceFromCS_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_createInstanceFromCS_pargs {
        public:


            virtual ~FmuService_createInstanceFromCS_pargs() noexcept;

            const FmuId *fmuId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_createInstanceFromCS_result__isset {
            _FmuService_createInstanceFromCS_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_createInstanceFromCS_result__isset;

        class FmuService_createInstanceFromCS_result {
        public:

            FmuService_createInstanceFromCS_result(const FmuService_createInstanceFromCS_result &);

            FmuService_createInstanceFromCS_result &operator=(const FmuService_createInstanceFromCS_result &);

            FmuService_createInstanceFromCS_result() : success() {
            }

            virtual ~FmuService_createInstanceFromCS_result() noexcept;

            InstanceId success;
            UnsupportedOperationException ex1;
            NoSuchFmuException ex2;

            _FmuService_createInstanceFromCS_result__isset __isset;

            void __set_success(const InstanceId &val);

            void __set_ex1(const UnsupportedOperationException &val);

            void __set_ex2(const NoSuchFmuException &val);

            bool operator==(const FmuService_createInstanceFromCS_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_createInstanceFromCS_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_createInstanceFromCS_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_createInstanceFromCS_presult__isset {
            _FmuService_createInstanceFromCS_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_createInstanceFromCS_presult__isset;

        class FmuService_createInstanceFromCS_presult {
        public:


            virtual ~FmuService_createInstanceFromCS_presult() noexcept;

            InstanceId *success;
            UnsupportedOperationException ex1;
            NoSuchFmuException ex2;

            _FmuService_createInstanceFromCS_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_createInstanceFromME_args__isset {
            _FmuService_createInstanceFromME_args__isset() : fmuId(false), solver(false) {}

            bool fmuId :1;
            bool solver :1;
        } _FmuService_createInstanceFromME_args__isset;

        class FmuService_createInstanceFromME_args {
        public:

            FmuService_createInstanceFromME_args(const FmuService_createInstanceFromME_args &);

            FmuService_createInstanceFromME_args &operator=(const FmuService_createInstanceFromME_args &);

            FmuService_createInstanceFromME_args() : fmuId() {
            }

            virtual ~FmuService_createInstanceFromME_args() noexcept;

            FmuId fmuId;
            Solver solver;

            _FmuService_createInstanceFromME_args__isset __isset;

            void __set_fmuId(const FmuId &val);

            void __set_solver(const Solver &val);

            bool operator==(const FmuService_createInstanceFromME_args &rhs) const {
                if (!(fmuId == rhs.fmuId))
                    return false;
                if (!(solver == rhs.solver))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_createInstanceFromME_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_createInstanceFromME_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_createInstanceFromME_pargs {
        public:


            virtual ~FmuService_createInstanceFromME_pargs() noexcept;

            const FmuId *fmuId;
            const Solver *solver;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_createInstanceFromME_result__isset {
            _FmuService_createInstanceFromME_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_createInstanceFromME_result__isset;

        class FmuService_createInstanceFromME_result {
        public:

            FmuService_createInstanceFromME_result(const FmuService_createInstanceFromME_result &);

            FmuService_createInstanceFromME_result &operator=(const FmuService_createInstanceFromME_result &);

            FmuService_createInstanceFromME_result() : success() {
            }

            virtual ~FmuService_createInstanceFromME_result() noexcept;

            InstanceId success;
            UnsupportedOperationException ex1;
            NoSuchFmuException ex2;

            _FmuService_createInstanceFromME_result__isset __isset;

            void __set_success(const InstanceId &val);

            void __set_ex1(const UnsupportedOperationException &val);

            void __set_ex2(const NoSuchFmuException &val);

            bool operator==(const FmuService_createInstanceFromME_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_createInstanceFromME_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_createInstanceFromME_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_createInstanceFromME_presult__isset {
            _FmuService_createInstanceFromME_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_createInstanceFromME_presult__isset;

        class FmuService_createInstanceFromME_presult {
        public:


            virtual ~FmuService_createInstanceFromME_presult() noexcept;

            InstanceId *success;
            UnsupportedOperationException ex1;
            NoSuchFmuException ex2;

            _FmuService_createInstanceFromME_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_setupExperiment_args__isset {
            _FmuService_setupExperiment_args__isset() : instanceId(false), start(false), stop(false),
                                                        tolerance(false) {}

            bool instanceId :1;
            bool start :1;
            bool stop :1;
            bool tolerance :1;
        } _FmuService_setupExperiment_args__isset;

        class FmuService_setupExperiment_args {
        public:

            FmuService_setupExperiment_args(const FmuService_setupExperiment_args &);

            FmuService_setupExperiment_args &operator=(const FmuService_setupExperiment_args &);

            FmuService_setupExperiment_args() : instanceId(), start(0), stop(0), tolerance(0) {
            }

            virtual ~FmuService_setupExperiment_args() noexcept;

            InstanceId instanceId;
            double start;
            double stop;
            double tolerance;

            _FmuService_setupExperiment_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_start(const double val);

            void __set_stop(const double val);

            void __set_tolerance(const double val);

            bool operator==(const FmuService_setupExperiment_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(start == rhs.start))
                    return false;
                if (!(stop == rhs.stop))
                    return false;
                if (!(tolerance == rhs.tolerance))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_setupExperiment_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_setupExperiment_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_setupExperiment_pargs {
        public:


            virtual ~FmuService_setupExperiment_pargs() noexcept;

            const InstanceId *instanceId;
            const double *start;
            const double *stop;
            const double *tolerance;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_setupExperiment_result__isset {
            _FmuService_setupExperiment_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_setupExperiment_result__isset;

        class FmuService_setupExperiment_result {
        public:

            FmuService_setupExperiment_result(const FmuService_setupExperiment_result &);

            FmuService_setupExperiment_result &operator=(const FmuService_setupExperiment_result &);

            FmuService_setupExperiment_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_setupExperiment_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex;

            _FmuService_setupExperiment_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex(const NoSuchInstanceException &val);

            bool operator==(const FmuService_setupExperiment_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_setupExperiment_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_setupExperiment_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_setupExperiment_presult__isset {
            _FmuService_setupExperiment_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_setupExperiment_presult__isset;

        class FmuService_setupExperiment_presult {
        public:


            virtual ~FmuService_setupExperiment_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex;

            _FmuService_setupExperiment_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_enterInitializationMode_args__isset {
            _FmuService_enterInitializationMode_args__isset() : instanceId(false) {}

            bool instanceId :1;
        } _FmuService_enterInitializationMode_args__isset;

        class FmuService_enterInitializationMode_args {
        public:

            FmuService_enterInitializationMode_args(const FmuService_enterInitializationMode_args &);

            FmuService_enterInitializationMode_args &operator=(const FmuService_enterInitializationMode_args &);

            FmuService_enterInitializationMode_args() : instanceId() {
            }

            virtual ~FmuService_enterInitializationMode_args() noexcept;

            InstanceId instanceId;

            _FmuService_enterInitializationMode_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            bool operator==(const FmuService_enterInitializationMode_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_enterInitializationMode_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_enterInitializationMode_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_enterInitializationMode_pargs {
        public:


            virtual ~FmuService_enterInitializationMode_pargs() noexcept;

            const InstanceId *instanceId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_enterInitializationMode_result__isset {
            _FmuService_enterInitializationMode_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_enterInitializationMode_result__isset;

        class FmuService_enterInitializationMode_result {
        public:

            FmuService_enterInitializationMode_result(const FmuService_enterInitializationMode_result &);

            FmuService_enterInitializationMode_result &operator=(const FmuService_enterInitializationMode_result &);

            FmuService_enterInitializationMode_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_enterInitializationMode_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex;

            _FmuService_enterInitializationMode_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex(const NoSuchInstanceException &val);

            bool operator==(const FmuService_enterInitializationMode_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_enterInitializationMode_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_enterInitializationMode_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_enterInitializationMode_presult__isset {
            _FmuService_enterInitializationMode_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_enterInitializationMode_presult__isset;

        class FmuService_enterInitializationMode_presult {
        public:


            virtual ~FmuService_enterInitializationMode_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex;

            _FmuService_enterInitializationMode_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_exitInitializationMode_args__isset {
            _FmuService_exitInitializationMode_args__isset() : instanceId(false) {}

            bool instanceId :1;
        } _FmuService_exitInitializationMode_args__isset;

        class FmuService_exitInitializationMode_args {
        public:

            FmuService_exitInitializationMode_args(const FmuService_exitInitializationMode_args &);

            FmuService_exitInitializationMode_args &operator=(const FmuService_exitInitializationMode_args &);

            FmuService_exitInitializationMode_args() : instanceId() {
            }

            virtual ~FmuService_exitInitializationMode_args() noexcept;

            InstanceId instanceId;

            _FmuService_exitInitializationMode_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            bool operator==(const FmuService_exitInitializationMode_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_exitInitializationMode_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_exitInitializationMode_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_exitInitializationMode_pargs {
        public:


            virtual ~FmuService_exitInitializationMode_pargs() noexcept;

            const InstanceId *instanceId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_exitInitializationMode_result__isset {
            _FmuService_exitInitializationMode_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_exitInitializationMode_result__isset;

        class FmuService_exitInitializationMode_result {
        public:

            FmuService_exitInitializationMode_result(const FmuService_exitInitializationMode_result &);

            FmuService_exitInitializationMode_result &operator=(const FmuService_exitInitializationMode_result &);

            FmuService_exitInitializationMode_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_exitInitializationMode_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex;

            _FmuService_exitInitializationMode_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex(const NoSuchInstanceException &val);

            bool operator==(const FmuService_exitInitializationMode_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_exitInitializationMode_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_exitInitializationMode_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_exitInitializationMode_presult__isset {
            _FmuService_exitInitializationMode_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_exitInitializationMode_presult__isset;

        class FmuService_exitInitializationMode_presult {
        public:


            virtual ~FmuService_exitInitializationMode_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex;

            _FmuService_exitInitializationMode_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_step_args__isset {
            _FmuService_step_args__isset() : instanceId(false), stepSize(false) {}

            bool instanceId :1;
            bool stepSize :1;
        } _FmuService_step_args__isset;

        class FmuService_step_args {
        public:

            FmuService_step_args(const FmuService_step_args &);

            FmuService_step_args &operator=(const FmuService_step_args &);

            FmuService_step_args() : instanceId(), stepSize(0) {
            }

            virtual ~FmuService_step_args() noexcept;

            InstanceId instanceId;
            double stepSize;

            _FmuService_step_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_stepSize(const double val);

            bool operator==(const FmuService_step_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(stepSize == rhs.stepSize))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_step_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_step_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_step_pargs {
        public:


            virtual ~FmuService_step_pargs() noexcept;

            const InstanceId *instanceId;
            const double *stepSize;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_step_result__isset {
            _FmuService_step_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_step_result__isset;

        class FmuService_step_result {
        public:

            FmuService_step_result(const FmuService_step_result &);

            FmuService_step_result &operator=(const FmuService_step_result &);

            FmuService_step_result() {
            }

            virtual ~FmuService_step_result() noexcept;

            StepResult success;
            NoSuchInstanceException ex;

            _FmuService_step_result__isset __isset;

            void __set_success(const StepResult &val);

            void __set_ex(const NoSuchInstanceException &val);

            bool operator==(const FmuService_step_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_step_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_step_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_step_presult__isset {
            _FmuService_step_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_step_presult__isset;

        class FmuService_step_presult {
        public:


            virtual ~FmuService_step_presult() noexcept;

            StepResult *success;
            NoSuchInstanceException ex;

            _FmuService_step_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_reset_args__isset {
            _FmuService_reset_args__isset() : instanceId(false) {}

            bool instanceId :1;
        } _FmuService_reset_args__isset;

        class FmuService_reset_args {
        public:

            FmuService_reset_args(const FmuService_reset_args &);

            FmuService_reset_args &operator=(const FmuService_reset_args &);

            FmuService_reset_args() : instanceId() {
            }

            virtual ~FmuService_reset_args() noexcept;

            InstanceId instanceId;

            _FmuService_reset_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            bool operator==(const FmuService_reset_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_reset_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_reset_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_reset_pargs {
        public:


            virtual ~FmuService_reset_pargs() noexcept;

            const InstanceId *instanceId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_reset_result__isset {
            _FmuService_reset_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_reset_result__isset;

        class FmuService_reset_result {
        public:

            FmuService_reset_result(const FmuService_reset_result &);

            FmuService_reset_result &operator=(const FmuService_reset_result &);

            FmuService_reset_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_reset_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex;

            _FmuService_reset_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex(const NoSuchInstanceException &val);

            bool operator==(const FmuService_reset_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_reset_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_reset_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_reset_presult__isset {
            _FmuService_reset_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_reset_presult__isset;

        class FmuService_reset_presult {
        public:


            virtual ~FmuService_reset_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex;

            _FmuService_reset_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_terminate_args__isset {
            _FmuService_terminate_args__isset() : instanceId(false) {}

            bool instanceId :1;
        } _FmuService_terminate_args__isset;

        class FmuService_terminate_args {
        public:

            FmuService_terminate_args(const FmuService_terminate_args &);

            FmuService_terminate_args &operator=(const FmuService_terminate_args &);

            FmuService_terminate_args() : instanceId() {
            }

            virtual ~FmuService_terminate_args() noexcept;

            InstanceId instanceId;

            _FmuService_terminate_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            bool operator==(const FmuService_terminate_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_terminate_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_terminate_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_terminate_pargs {
        public:


            virtual ~FmuService_terminate_pargs() noexcept;

            const InstanceId *instanceId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_terminate_result__isset {
            _FmuService_terminate_result__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_terminate_result__isset;

        class FmuService_terminate_result {
        public:

            FmuService_terminate_result(const FmuService_terminate_result &);

            FmuService_terminate_result &operator=(const FmuService_terminate_result &);

            FmuService_terminate_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_terminate_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex;

            _FmuService_terminate_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex(const NoSuchInstanceException &val);

            bool operator==(const FmuService_terminate_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex == rhs.ex))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_terminate_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_terminate_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_terminate_presult__isset {
            _FmuService_terminate_presult__isset() : success(false), ex(false) {}

            bool success :1;
            bool ex :1;
        } _FmuService_terminate_presult__isset;

        class FmuService_terminate_presult {
        public:


            virtual ~FmuService_terminate_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex;

            _FmuService_terminate_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_readInteger_args__isset {
            _FmuService_readInteger_args__isset() : instanceId(false), vr(false) {}

            bool instanceId :1;
            bool vr :1;
        } _FmuService_readInteger_args__isset;

        class FmuService_readInteger_args {
        public:

            FmuService_readInteger_args(const FmuService_readInteger_args &);

            FmuService_readInteger_args &operator=(const FmuService_readInteger_args &);

            FmuService_readInteger_args() : instanceId() {
            }

            virtual ~FmuService_readInteger_args() noexcept;

            InstanceId instanceId;
            ValueReferences vr;

            _FmuService_readInteger_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_vr(const ValueReferences &val);

            bool operator==(const FmuService_readInteger_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(vr == rhs.vr))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_readInteger_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_readInteger_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_readInteger_pargs {
        public:


            virtual ~FmuService_readInteger_pargs() noexcept;

            const InstanceId *instanceId;
            const ValueReferences *vr;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_readInteger_result__isset {
            _FmuService_readInteger_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_readInteger_result__isset;

        class FmuService_readInteger_result {
        public:

            FmuService_readInteger_result(const FmuService_readInteger_result &);

            FmuService_readInteger_result &operator=(const FmuService_readInteger_result &);

            FmuService_readInteger_result() {
            }

            virtual ~FmuService_readInteger_result() noexcept;

            IntegerRead success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_readInteger_result__isset __isset;

            void __set_success(const IntegerRead &val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const NoSuchVariableException &val);

            bool operator==(const FmuService_readInteger_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_readInteger_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_readInteger_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_readInteger_presult__isset {
            _FmuService_readInteger_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_readInteger_presult__isset;

        class FmuService_readInteger_presult {
        public:


            virtual ~FmuService_readInteger_presult() noexcept;

            IntegerRead *success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_readInteger_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_readReal_args__isset {
            _FmuService_readReal_args__isset() : instanceId(false), vr(false) {}

            bool instanceId :1;
            bool vr :1;
        } _FmuService_readReal_args__isset;

        class FmuService_readReal_args {
        public:

            FmuService_readReal_args(const FmuService_readReal_args &);

            FmuService_readReal_args &operator=(const FmuService_readReal_args &);

            FmuService_readReal_args() : instanceId() {
            }

            virtual ~FmuService_readReal_args() noexcept;

            InstanceId instanceId;
            ValueReferences vr;

            _FmuService_readReal_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_vr(const ValueReferences &val);

            bool operator==(const FmuService_readReal_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(vr == rhs.vr))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_readReal_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_readReal_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_readReal_pargs {
        public:


            virtual ~FmuService_readReal_pargs() noexcept;

            const InstanceId *instanceId;
            const ValueReferences *vr;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_readReal_result__isset {
            _FmuService_readReal_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_readReal_result__isset;

        class FmuService_readReal_result {
        public:

            FmuService_readReal_result(const FmuService_readReal_result &);

            FmuService_readReal_result &operator=(const FmuService_readReal_result &);

            FmuService_readReal_result() {
            }

            virtual ~FmuService_readReal_result() noexcept;

            RealRead success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_readReal_result__isset __isset;

            void __set_success(const RealRead &val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const NoSuchVariableException &val);

            bool operator==(const FmuService_readReal_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_readReal_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_readReal_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_readReal_presult__isset {
            _FmuService_readReal_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_readReal_presult__isset;

        class FmuService_readReal_presult {
        public:


            virtual ~FmuService_readReal_presult() noexcept;

            RealRead *success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_readReal_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_readString_args__isset {
            _FmuService_readString_args__isset() : instanceId(false), vr(false) {}

            bool instanceId :1;
            bool vr :1;
        } _FmuService_readString_args__isset;

        class FmuService_readString_args {
        public:

            FmuService_readString_args(const FmuService_readString_args &);

            FmuService_readString_args &operator=(const FmuService_readString_args &);

            FmuService_readString_args() : instanceId() {
            }

            virtual ~FmuService_readString_args() noexcept;

            InstanceId instanceId;
            ValueReferences vr;

            _FmuService_readString_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_vr(const ValueReferences &val);

            bool operator==(const FmuService_readString_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(vr == rhs.vr))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_readString_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_readString_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_readString_pargs {
        public:


            virtual ~FmuService_readString_pargs() noexcept;

            const InstanceId *instanceId;
            const ValueReferences *vr;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_readString_result__isset {
            _FmuService_readString_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_readString_result__isset;

        class FmuService_readString_result {
        public:

            FmuService_readString_result(const FmuService_readString_result &);

            FmuService_readString_result &operator=(const FmuService_readString_result &);

            FmuService_readString_result() {
            }

            virtual ~FmuService_readString_result() noexcept;

            StringRead success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_readString_result__isset __isset;

            void __set_success(const StringRead &val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const NoSuchVariableException &val);

            bool operator==(const FmuService_readString_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_readString_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_readString_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_readString_presult__isset {
            _FmuService_readString_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_readString_presult__isset;

        class FmuService_readString_presult {
        public:


            virtual ~FmuService_readString_presult() noexcept;

            StringRead *success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_readString_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_readBoolean_args__isset {
            _FmuService_readBoolean_args__isset() : instanceId(false), vr(false) {}

            bool instanceId :1;
            bool vr :1;
        } _FmuService_readBoolean_args__isset;

        class FmuService_readBoolean_args {
        public:

            FmuService_readBoolean_args(const FmuService_readBoolean_args &);

            FmuService_readBoolean_args &operator=(const FmuService_readBoolean_args &);

            FmuService_readBoolean_args() : instanceId() {
            }

            virtual ~FmuService_readBoolean_args() noexcept;

            InstanceId instanceId;
            ValueReferences vr;

            _FmuService_readBoolean_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_vr(const ValueReferences &val);

            bool operator==(const FmuService_readBoolean_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(vr == rhs.vr))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_readBoolean_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_readBoolean_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_readBoolean_pargs {
        public:


            virtual ~FmuService_readBoolean_pargs() noexcept;

            const InstanceId *instanceId;
            const ValueReferences *vr;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_readBoolean_result__isset {
            _FmuService_readBoolean_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_readBoolean_result__isset;

        class FmuService_readBoolean_result {
        public:

            FmuService_readBoolean_result(const FmuService_readBoolean_result &);

            FmuService_readBoolean_result &operator=(const FmuService_readBoolean_result &);

            FmuService_readBoolean_result() {
            }

            virtual ~FmuService_readBoolean_result() noexcept;

            BooleanRead success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_readBoolean_result__isset __isset;

            void __set_success(const BooleanRead &val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const NoSuchVariableException &val);

            bool operator==(const FmuService_readBoolean_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_readBoolean_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_readBoolean_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_readBoolean_presult__isset {
            _FmuService_readBoolean_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_readBoolean_presult__isset;

        class FmuService_readBoolean_presult {
        public:


            virtual ~FmuService_readBoolean_presult() noexcept;

            BooleanRead *success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_readBoolean_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_writeInteger_args__isset {
            _FmuService_writeInteger_args__isset() : instanceId(false), vr(false), value(false) {}

            bool instanceId :1;
            bool vr :1;
            bool value :1;
        } _FmuService_writeInteger_args__isset;

        class FmuService_writeInteger_args {
        public:

            FmuService_writeInteger_args(const FmuService_writeInteger_args &);

            FmuService_writeInteger_args &operator=(const FmuService_writeInteger_args &);

            FmuService_writeInteger_args() : instanceId() {
            }

            virtual ~FmuService_writeInteger_args() noexcept;

            InstanceId instanceId;
            ValueReferences vr;
            IntArray value;

            _FmuService_writeInteger_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_vr(const ValueReferences &val);

            void __set_value(const IntArray &val);

            bool operator==(const FmuService_writeInteger_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(vr == rhs.vr))
                    return false;
                if (!(value == rhs.value))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_writeInteger_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_writeInteger_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_writeInteger_pargs {
        public:


            virtual ~FmuService_writeInteger_pargs() noexcept;

            const InstanceId *instanceId;
            const ValueReferences *vr;
            const IntArray *value;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_writeInteger_result__isset {
            _FmuService_writeInteger_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_writeInteger_result__isset;

        class FmuService_writeInteger_result {
        public:

            FmuService_writeInteger_result(const FmuService_writeInteger_result &);

            FmuService_writeInteger_result &operator=(const FmuService_writeInteger_result &);

            FmuService_writeInteger_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_writeInteger_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_writeInteger_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const NoSuchVariableException &val);

            bool operator==(const FmuService_writeInteger_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_writeInteger_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_writeInteger_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_writeInteger_presult__isset {
            _FmuService_writeInteger_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_writeInteger_presult__isset;

        class FmuService_writeInteger_presult {
        public:


            virtual ~FmuService_writeInteger_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_writeInteger_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_writeReal_args__isset {
            _FmuService_writeReal_args__isset() : instanceId(false), vr(false), value(false) {}

            bool instanceId :1;
            bool vr :1;
            bool value :1;
        } _FmuService_writeReal_args__isset;

        class FmuService_writeReal_args {
        public:

            FmuService_writeReal_args(const FmuService_writeReal_args &);

            FmuService_writeReal_args &operator=(const FmuService_writeReal_args &);

            FmuService_writeReal_args() : instanceId() {
            }

            virtual ~FmuService_writeReal_args() noexcept;

            InstanceId instanceId;
            ValueReferences vr;
            RealArray value;

            _FmuService_writeReal_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_vr(const ValueReferences &val);

            void __set_value(const RealArray &val);

            bool operator==(const FmuService_writeReal_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(vr == rhs.vr))
                    return false;
                if (!(value == rhs.value))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_writeReal_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_writeReal_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_writeReal_pargs {
        public:


            virtual ~FmuService_writeReal_pargs() noexcept;

            const InstanceId *instanceId;
            const ValueReferences *vr;
            const RealArray *value;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_writeReal_result__isset {
            _FmuService_writeReal_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_writeReal_result__isset;

        class FmuService_writeReal_result {
        public:

            FmuService_writeReal_result(const FmuService_writeReal_result &);

            FmuService_writeReal_result &operator=(const FmuService_writeReal_result &);

            FmuService_writeReal_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_writeReal_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_writeReal_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const NoSuchVariableException &val);

            bool operator==(const FmuService_writeReal_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_writeReal_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_writeReal_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_writeReal_presult__isset {
            _FmuService_writeReal_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_writeReal_presult__isset;

        class FmuService_writeReal_presult {
        public:


            virtual ~FmuService_writeReal_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_writeReal_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_writeString_args__isset {
            _FmuService_writeString_args__isset() : instanceId(false), vr(false), value(false) {}

            bool instanceId :1;
            bool vr :1;
            bool value :1;
        } _FmuService_writeString_args__isset;

        class FmuService_writeString_args {
        public:

            FmuService_writeString_args(const FmuService_writeString_args &);

            FmuService_writeString_args &operator=(const FmuService_writeString_args &);

            FmuService_writeString_args() : instanceId() {
            }

            virtual ~FmuService_writeString_args() noexcept;

            InstanceId instanceId;
            ValueReferences vr;
            StringArray value;

            _FmuService_writeString_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_vr(const ValueReferences &val);

            void __set_value(const StringArray &val);

            bool operator==(const FmuService_writeString_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(vr == rhs.vr))
                    return false;
                if (!(value == rhs.value))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_writeString_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_writeString_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_writeString_pargs {
        public:


            virtual ~FmuService_writeString_pargs() noexcept;

            const InstanceId *instanceId;
            const ValueReferences *vr;
            const StringArray *value;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_writeString_result__isset {
            _FmuService_writeString_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_writeString_result__isset;

        class FmuService_writeString_result {
        public:

            FmuService_writeString_result(const FmuService_writeString_result &);

            FmuService_writeString_result &operator=(const FmuService_writeString_result &);

            FmuService_writeString_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_writeString_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_writeString_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const NoSuchVariableException &val);

            bool operator==(const FmuService_writeString_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_writeString_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_writeString_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_writeString_presult__isset {
            _FmuService_writeString_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_writeString_presult__isset;

        class FmuService_writeString_presult {
        public:


            virtual ~FmuService_writeString_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_writeString_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_writeBoolean_args__isset {
            _FmuService_writeBoolean_args__isset() : instanceId(false), vr(false), value(false) {}

            bool instanceId :1;
            bool vr :1;
            bool value :1;
        } _FmuService_writeBoolean_args__isset;

        class FmuService_writeBoolean_args {
        public:

            FmuService_writeBoolean_args(const FmuService_writeBoolean_args &);

            FmuService_writeBoolean_args &operator=(const FmuService_writeBoolean_args &);

            FmuService_writeBoolean_args() : instanceId() {
            }

            virtual ~FmuService_writeBoolean_args() noexcept;

            InstanceId instanceId;
            ValueReferences vr;
            BooleanArray value;

            _FmuService_writeBoolean_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_vr(const ValueReferences &val);

            void __set_value(const BooleanArray &val);

            bool operator==(const FmuService_writeBoolean_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(vr == rhs.vr))
                    return false;
                if (!(value == rhs.value))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_writeBoolean_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_writeBoolean_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_writeBoolean_pargs {
        public:


            virtual ~FmuService_writeBoolean_pargs() noexcept;

            const InstanceId *instanceId;
            const ValueReferences *vr;
            const BooleanArray *value;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_writeBoolean_result__isset {
            _FmuService_writeBoolean_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_writeBoolean_result__isset;

        class FmuService_writeBoolean_result {
        public:

            FmuService_writeBoolean_result(const FmuService_writeBoolean_result &);

            FmuService_writeBoolean_result &operator=(const FmuService_writeBoolean_result &);

            FmuService_writeBoolean_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_writeBoolean_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_writeBoolean_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const NoSuchVariableException &val);

            bool operator==(const FmuService_writeBoolean_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_writeBoolean_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_writeBoolean_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_writeBoolean_presult__isset {
            _FmuService_writeBoolean_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_writeBoolean_presult__isset;

        class FmuService_writeBoolean_presult {
        public:


            virtual ~FmuService_writeBoolean_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex1;
            NoSuchVariableException ex2;

            _FmuService_writeBoolean_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_getFMUstate_args__isset {
            _FmuService_getFMUstate_args__isset() : instanceId(false) {}

            bool instanceId :1;
        } _FmuService_getFMUstate_args__isset;

        class FmuService_getFMUstate_args {
        public:

            FmuService_getFMUstate_args(const FmuService_getFMUstate_args &);

            FmuService_getFMUstate_args &operator=(const FmuService_getFMUstate_args &);

            FmuService_getFMUstate_args() : instanceId() {
            }

            virtual ~FmuService_getFMUstate_args() noexcept;

            InstanceId instanceId;

            _FmuService_getFMUstate_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            bool operator==(const FmuService_getFMUstate_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_getFMUstate_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_getFMUstate_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_getFMUstate_pargs {
        public:


            virtual ~FmuService_getFMUstate_pargs() noexcept;

            const InstanceId *instanceId;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_getFMUstate_result__isset {
            _FmuService_getFMUstate_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_getFMUstate_result__isset;

        class FmuService_getFMUstate_result {
        public:

            FmuService_getFMUstate_result(const FmuService_getFMUstate_result &);

            FmuService_getFMUstate_result &operator=(const FmuService_getFMUstate_result &);

            FmuService_getFMUstate_result() {
            }

            virtual ~FmuService_getFMUstate_result() noexcept;

            GetFmuStateResult success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_getFMUstate_result__isset __isset;

            void __set_success(const GetFmuStateResult &val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const UnsupportedOperationException &val);

            bool operator==(const FmuService_getFMUstate_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_getFMUstate_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_getFMUstate_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_getFMUstate_presult__isset {
            _FmuService_getFMUstate_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_getFMUstate_presult__isset;

        class FmuService_getFMUstate_presult {
        public:


            virtual ~FmuService_getFMUstate_presult() noexcept;

            GetFmuStateResult *success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_getFMUstate_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_setFMUstate_args__isset {
            _FmuService_setFMUstate_args__isset() : instanceId(false), state(false) {}

            bool instanceId :1;
            bool state :1;
        } _FmuService_setFMUstate_args__isset;

        class FmuService_setFMUstate_args {
        public:

            FmuService_setFMUstate_args(const FmuService_setFMUstate_args &);

            FmuService_setFMUstate_args &operator=(const FmuService_setFMUstate_args &);

            FmuService_setFMUstate_args() : instanceId(), state(0) {
            }

            virtual ~FmuService_setFMUstate_args() noexcept;

            InstanceId instanceId;
            FmuState state;

            _FmuService_setFMUstate_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_state(const FmuState val);

            bool operator==(const FmuService_setFMUstate_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(state == rhs.state))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_setFMUstate_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_setFMUstate_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_setFMUstate_pargs {
        public:


            virtual ~FmuService_setFMUstate_pargs() noexcept;

            const InstanceId *instanceId;
            const FmuState *state;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_setFMUstate_result__isset {
            _FmuService_setFMUstate_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_setFMUstate_result__isset;

        class FmuService_setFMUstate_result {
        public:

            FmuService_setFMUstate_result(const FmuService_setFMUstate_result &);

            FmuService_setFMUstate_result &operator=(const FmuService_setFMUstate_result &);

            FmuService_setFMUstate_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_setFMUstate_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_setFMUstate_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const UnsupportedOperationException &val);

            bool operator==(const FmuService_setFMUstate_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_setFMUstate_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_setFMUstate_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_setFMUstate_presult__isset {
            _FmuService_setFMUstate_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_setFMUstate_presult__isset;

        class FmuService_setFMUstate_presult {
        public:


            virtual ~FmuService_setFMUstate_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_setFMUstate_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_freeFMUstate_args__isset {
            _FmuService_freeFMUstate_args__isset() : instanceId(false), state(false) {}

            bool instanceId :1;
            bool state :1;
        } _FmuService_freeFMUstate_args__isset;

        class FmuService_freeFMUstate_args {
        public:

            FmuService_freeFMUstate_args(const FmuService_freeFMUstate_args &);

            FmuService_freeFMUstate_args &operator=(const FmuService_freeFMUstate_args &);

            FmuService_freeFMUstate_args() : instanceId(), state(0) {
            }

            virtual ~FmuService_freeFMUstate_args() noexcept;

            InstanceId instanceId;
            FmuState state;

            _FmuService_freeFMUstate_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_state(const FmuState val);

            bool operator==(const FmuService_freeFMUstate_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(state == rhs.state))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_freeFMUstate_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_freeFMUstate_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_freeFMUstate_pargs {
        public:


            virtual ~FmuService_freeFMUstate_pargs() noexcept;

            const InstanceId *instanceId;
            const FmuState *state;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_freeFMUstate_result__isset {
            _FmuService_freeFMUstate_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_freeFMUstate_result__isset;

        class FmuService_freeFMUstate_result {
        public:

            FmuService_freeFMUstate_result(const FmuService_freeFMUstate_result &);

            FmuService_freeFMUstate_result &operator=(const FmuService_freeFMUstate_result &);

            FmuService_freeFMUstate_result() : success((Status::type) 0) {
            }

            virtual ~FmuService_freeFMUstate_result() noexcept;

            Status::type success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_freeFMUstate_result__isset __isset;

            void __set_success(const Status::type val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const UnsupportedOperationException &val);

            bool operator==(const FmuService_freeFMUstate_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_freeFMUstate_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_freeFMUstate_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_freeFMUstate_presult__isset {
            _FmuService_freeFMUstate_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_freeFMUstate_presult__isset;

        class FmuService_freeFMUstate_presult {
        public:


            virtual ~FmuService_freeFMUstate_presult() noexcept;

            Status::type *success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_freeFMUstate_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_serializeFMUstate_args__isset {
            _FmuService_serializeFMUstate_args__isset() : instanceId(false), state(false) {}

            bool instanceId :1;
            bool state :1;
        } _FmuService_serializeFMUstate_args__isset;

        class FmuService_serializeFMUstate_args {
        public:

            FmuService_serializeFMUstate_args(const FmuService_serializeFMUstate_args &);

            FmuService_serializeFMUstate_args &operator=(const FmuService_serializeFMUstate_args &);

            FmuService_serializeFMUstate_args() : instanceId(), state(0) {
            }

            virtual ~FmuService_serializeFMUstate_args() noexcept;

            InstanceId instanceId;
            FmuState state;

            _FmuService_serializeFMUstate_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_state(const FmuState val);

            bool operator==(const FmuService_serializeFMUstate_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(state == rhs.state))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_serializeFMUstate_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_serializeFMUstate_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_serializeFMUstate_pargs {
        public:


            virtual ~FmuService_serializeFMUstate_pargs() noexcept;

            const InstanceId *instanceId;
            const FmuState *state;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_serializeFMUstate_result__isset {
            _FmuService_serializeFMUstate_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_serializeFMUstate_result__isset;

        class FmuService_serializeFMUstate_result {
        public:

            FmuService_serializeFMUstate_result(const FmuService_serializeFMUstate_result &);

            FmuService_serializeFMUstate_result &operator=(const FmuService_serializeFMUstate_result &);

            FmuService_serializeFMUstate_result() {
            }

            virtual ~FmuService_serializeFMUstate_result() noexcept;

            SerializeFmuStateResult success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_serializeFMUstate_result__isset __isset;

            void __set_success(const SerializeFmuStateResult &val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const UnsupportedOperationException &val);

            bool operator==(const FmuService_serializeFMUstate_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_serializeFMUstate_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_serializeFMUstate_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_serializeFMUstate_presult__isset {
            _FmuService_serializeFMUstate_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_serializeFMUstate_presult__isset;

        class FmuService_serializeFMUstate_presult {
        public:


            virtual ~FmuService_serializeFMUstate_presult() noexcept;

            SerializeFmuStateResult *success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_serializeFMUstate_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_deSerializeFMUstate_args__isset {
            _FmuService_deSerializeFMUstate_args__isset() : instanceId(false), state(false) {}

            bool instanceId :1;
            bool state :1;
        } _FmuService_deSerializeFMUstate_args__isset;

        class FmuService_deSerializeFMUstate_args {
        public:

            FmuService_deSerializeFMUstate_args(const FmuService_deSerializeFMUstate_args &);

            FmuService_deSerializeFMUstate_args &operator=(const FmuService_deSerializeFMUstate_args &);

            FmuService_deSerializeFMUstate_args() : instanceId(), state() {
            }

            virtual ~FmuService_deSerializeFMUstate_args() noexcept;

            InstanceId instanceId;
            std::string state;

            _FmuService_deSerializeFMUstate_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_state(const std::string &val);

            bool operator==(const FmuService_deSerializeFMUstate_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(state == rhs.state))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_deSerializeFMUstate_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_deSerializeFMUstate_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_deSerializeFMUstate_pargs {
        public:


            virtual ~FmuService_deSerializeFMUstate_pargs() noexcept;

            const InstanceId *instanceId;
            const std::string *state;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_deSerializeFMUstate_result__isset {
            _FmuService_deSerializeFMUstate_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_deSerializeFMUstate_result__isset;

        class FmuService_deSerializeFMUstate_result {
        public:

            FmuService_deSerializeFMUstate_result(const FmuService_deSerializeFMUstate_result &);

            FmuService_deSerializeFMUstate_result &operator=(const FmuService_deSerializeFMUstate_result &);

            FmuService_deSerializeFMUstate_result() {
            }

            virtual ~FmuService_deSerializeFMUstate_result() noexcept;

            DeSerializeFmuStateResult success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_deSerializeFMUstate_result__isset __isset;

            void __set_success(const DeSerializeFmuStateResult &val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const UnsupportedOperationException &val);

            bool operator==(const FmuService_deSerializeFMUstate_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_deSerializeFMUstate_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_deSerializeFMUstate_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_deSerializeFMUstate_presult__isset {
            _FmuService_deSerializeFMUstate_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_deSerializeFMUstate_presult__isset;

        class FmuService_deSerializeFMUstate_presult {
        public:


            virtual ~FmuService_deSerializeFMUstate_presult() noexcept;

            DeSerializeFmuStateResult *success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_deSerializeFMUstate_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        typedef struct _FmuService_getDirectionalDerivative_args__isset {
            _FmuService_getDirectionalDerivative_args__isset() : instanceId(false), vUnknownRef(false),
                                                                 vKnownRef(false), dvKnownRef(false) {}

            bool instanceId :1;
            bool vUnknownRef :1;
            bool vKnownRef :1;
            bool dvKnownRef :1;
        } _FmuService_getDirectionalDerivative_args__isset;

        class FmuService_getDirectionalDerivative_args {
        public:

            FmuService_getDirectionalDerivative_args(const FmuService_getDirectionalDerivative_args &);

            FmuService_getDirectionalDerivative_args &operator=(const FmuService_getDirectionalDerivative_args &);

            FmuService_getDirectionalDerivative_args() : instanceId() {
            }

            virtual ~FmuService_getDirectionalDerivative_args() noexcept;

            InstanceId instanceId;
            ValueReferences vUnknownRef;
            ValueReferences vKnownRef;
            std::vector<double> dvKnownRef;

            _FmuService_getDirectionalDerivative_args__isset __isset;

            void __set_instanceId(const InstanceId &val);

            void __set_vUnknownRef(const ValueReferences &val);

            void __set_vKnownRef(const ValueReferences &val);

            void __set_dvKnownRef(const std::vector<double> &val);

            bool operator==(const FmuService_getDirectionalDerivative_args &rhs) const {
                if (!(instanceId == rhs.instanceId))
                    return false;
                if (!(vUnknownRef == rhs.vUnknownRef))
                    return false;
                if (!(vKnownRef == rhs.vKnownRef))
                    return false;
                if (!(dvKnownRef == rhs.dvKnownRef))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_getDirectionalDerivative_args &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_getDirectionalDerivative_args &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };


        class FmuService_getDirectionalDerivative_pargs {
        public:


            virtual ~FmuService_getDirectionalDerivative_pargs() noexcept;

            const InstanceId *instanceId;
            const ValueReferences *vUnknownRef;
            const ValueReferences *vKnownRef;
            const std::vector<double> *dvKnownRef;

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_getDirectionalDerivative_result__isset {
            _FmuService_getDirectionalDerivative_result__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_getDirectionalDerivative_result__isset;

        class FmuService_getDirectionalDerivative_result {
        public:

            FmuService_getDirectionalDerivative_result(const FmuService_getDirectionalDerivative_result &);

            FmuService_getDirectionalDerivative_result &operator=(const FmuService_getDirectionalDerivative_result &);

            FmuService_getDirectionalDerivative_result() {
            }

            virtual ~FmuService_getDirectionalDerivative_result() noexcept;

            DirectionalDerivativeResult success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_getDirectionalDerivative_result__isset __isset;

            void __set_success(const DirectionalDerivativeResult &val);

            void __set_ex1(const NoSuchInstanceException &val);

            void __set_ex2(const UnsupportedOperationException &val);

            bool operator==(const FmuService_getDirectionalDerivative_result &rhs) const {
                if (!(success == rhs.success))
                    return false;
                if (!(ex1 == rhs.ex1))
                    return false;
                if (!(ex2 == rhs.ex2))
                    return false;
                return true;
            }

            bool operator!=(const FmuService_getDirectionalDerivative_result &rhs) const {
                return !(*this == rhs);
            }

            bool operator<(const FmuService_getDirectionalDerivative_result &) const;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

            uint32_t write(::apache::thrift::protocol::TProtocol *oprot) const;

        };

        typedef struct _FmuService_getDirectionalDerivative_presult__isset {
            _FmuService_getDirectionalDerivative_presult__isset() : success(false), ex1(false), ex2(false) {}

            bool success :1;
            bool ex1 :1;
            bool ex2 :1;
        } _FmuService_getDirectionalDerivative_presult__isset;

        class FmuService_getDirectionalDerivative_presult {
        public:


            virtual ~FmuService_getDirectionalDerivative_presult() noexcept;

            DirectionalDerivativeResult *success;
            NoSuchInstanceException ex1;
            UnsupportedOperationException ex2;

            _FmuService_getDirectionalDerivative_presult__isset __isset;

            uint32_t read(::apache::thrift::protocol::TProtocol *iprot);

        };

        class FmuServiceClient : virtual public FmuServiceIf {
        public:
            FmuServiceClient(std::shared_ptr<::apache::thrift::protocol::TProtocol> prot) {
                setProtocol(prot);
            }

            FmuServiceClient(std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
                             std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot) {
                setProtocol(iprot, oprot);
            }

        private:
            void setProtocol(std::shared_ptr<::apache::thrift::protocol::TProtocol> prot) {
                setProtocol(prot, prot);
            }

            void setProtocol(std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
                             std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot) {
                piprot_ = iprot;
                poprot_ = oprot;
                iprot_ = iprot.get();
                oprot_ = oprot.get();
            }

        public:
            std::shared_ptr<::apache::thrift::protocol::TProtocol> getInputProtocol() {
                return piprot_;
            }

            std::shared_ptr<::apache::thrift::protocol::TProtocol> getOutputProtocol() {
                return poprot_;
            }

            void getModelDescription(ModelDescription &_return, const FmuId &fmuId);

            void send_getModelDescription(const FmuId &fmuId);

            void recv_getModelDescription(ModelDescription &_return);

            void getCoSimulationAttributes(CoSimulationAttributes &_return, const InstanceId &instanceId);

            void send_getCoSimulationAttributes(const InstanceId &instanceId);

            void recv_getCoSimulationAttributes(CoSimulationAttributes &_return);

            bool canCreateInstanceFromCS(const FmuId &fmuId);

            void send_canCreateInstanceFromCS(const FmuId &fmuId);

            bool recv_canCreateInstanceFromCS();

            bool canCreateInstanceFromME(const FmuId &fmuId);

            void send_canCreateInstanceFromME(const FmuId &fmuId);

            bool recv_canCreateInstanceFromME();

            void createInstanceFromCS(InstanceId &_return, const FmuId &fmuId);

            void send_createInstanceFromCS(const FmuId &fmuId);

            void recv_createInstanceFromCS(InstanceId &_return);

            void createInstanceFromME(InstanceId &_return, const FmuId &fmuId, const Solver &solver);

            void send_createInstanceFromME(const FmuId &fmuId, const Solver &solver);

            void recv_createInstanceFromME(InstanceId &_return);

            Status::type setupExperiment(const InstanceId &instanceId, const double start, const double stop,
                                         const double tolerance);

            void send_setupExperiment(const InstanceId &instanceId, const double start, const double stop,
                                      const double tolerance);

            Status::type recv_setupExperiment();

            Status::type enterInitializationMode(const InstanceId &instanceId);

            void send_enterInitializationMode(const InstanceId &instanceId);

            Status::type recv_enterInitializationMode();

            Status::type exitInitializationMode(const InstanceId &instanceId);

            void send_exitInitializationMode(const InstanceId &instanceId);

            Status::type recv_exitInitializationMode();

            void step(StepResult &_return, const InstanceId &instanceId, const double stepSize);

            void send_step(const InstanceId &instanceId, const double stepSize);

            void recv_step(StepResult &_return);

            Status::type reset(const InstanceId &instanceId);

            void send_reset(const InstanceId &instanceId);

            Status::type recv_reset();

            Status::type terminate(const InstanceId &instanceId);

            void send_terminate(const InstanceId &instanceId);

            Status::type recv_terminate();

            void readInteger(IntegerRead &_return, const InstanceId &instanceId, const ValueReferences &vr);

            void send_readInteger(const InstanceId &instanceId, const ValueReferences &vr);

            void recv_readInteger(IntegerRead &_return);

            void readReal(RealRead &_return, const InstanceId &instanceId, const ValueReferences &vr);

            void send_readReal(const InstanceId &instanceId, const ValueReferences &vr);

            void recv_readReal(RealRead &_return);

            void readString(StringRead &_return, const InstanceId &instanceId, const ValueReferences &vr);

            void send_readString(const InstanceId &instanceId, const ValueReferences &vr);

            void recv_readString(StringRead &_return);

            void readBoolean(BooleanRead &_return, const InstanceId &instanceId, const ValueReferences &vr);

            void send_readBoolean(const InstanceId &instanceId, const ValueReferences &vr);

            void recv_readBoolean(BooleanRead &_return);

            Status::type writeInteger(const InstanceId &instanceId, const ValueReferences &vr, const IntArray &value);

            void send_writeInteger(const InstanceId &instanceId, const ValueReferences &vr, const IntArray &value);

            Status::type recv_writeInteger();

            Status::type writeReal(const InstanceId &instanceId, const ValueReferences &vr, const RealArray &value);

            void send_writeReal(const InstanceId &instanceId, const ValueReferences &vr, const RealArray &value);

            Status::type recv_writeReal();

            Status::type writeString(const InstanceId &instanceId, const ValueReferences &vr, const StringArray &value);

            void send_writeString(const InstanceId &instanceId, const ValueReferences &vr, const StringArray &value);

            Status::type recv_writeString();

            Status::type
            writeBoolean(const InstanceId &instanceId, const ValueReferences &vr, const BooleanArray &value);

            void send_writeBoolean(const InstanceId &instanceId, const ValueReferences &vr, const BooleanArray &value);

            Status::type recv_writeBoolean();

            void getFMUstate(GetFmuStateResult &_return, const InstanceId &instanceId);

            void send_getFMUstate(const InstanceId &instanceId);

            void recv_getFMUstate(GetFmuStateResult &_return);

            Status::type setFMUstate(const InstanceId &instanceId, const FmuState state);

            void send_setFMUstate(const InstanceId &instanceId, const FmuState state);

            Status::type recv_setFMUstate();

            Status::type freeFMUstate(const InstanceId &instanceId, const FmuState state);

            void send_freeFMUstate(const InstanceId &instanceId, const FmuState state);

            Status::type recv_freeFMUstate();

            void
            serializeFMUstate(SerializeFmuStateResult &_return, const InstanceId &instanceId, const FmuState state);

            void send_serializeFMUstate(const InstanceId &instanceId, const FmuState state);

            void recv_serializeFMUstate(SerializeFmuStateResult &_return);

            void deSerializeFMUstate(DeSerializeFmuStateResult &_return, const InstanceId &instanceId,
                                     const std::string &state);

            void send_deSerializeFMUstate(const InstanceId &instanceId, const std::string &state);

            void recv_deSerializeFMUstate(DeSerializeFmuStateResult &_return);

            void getDirectionalDerivative(DirectionalDerivativeResult &_return, const InstanceId &instanceId,
                                          const ValueReferences &vUnknownRef, const ValueReferences &vKnownRef,
                                          const std::vector<double> &dvKnownRef);

            void send_getDirectionalDerivative(const InstanceId &instanceId, const ValueReferences &vUnknownRef,
                                               const ValueReferences &vKnownRef, const std::vector<double> &dvKnownRef);

            void recv_getDirectionalDerivative(DirectionalDerivativeResult &_return);

        protected:
            std::shared_ptr<::apache::thrift::protocol::TProtocol> piprot_;
            std::shared_ptr<::apache::thrift::protocol::TProtocol> poprot_;
            ::apache::thrift::protocol::TProtocol *iprot_;
            ::apache::thrift::protocol::TProtocol *oprot_;
        };

        class FmuServiceProcessor : public ::apache::thrift::TDispatchProcessor {
        protected:
            ::std::shared_ptr<FmuServiceIf> iface_;

            virtual bool
            dispatchCall(::apache::thrift::protocol::TProtocol *iprot, ::apache::thrift::protocol::TProtocol *oprot,
                         const std::string &fname, int32_t seqid, void *callContext);

        private:
            typedef void (FmuServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol *,
                                                                 ::apache::thrift::protocol::TProtocol *, void *);

            typedef std::map<std::string, ProcessFunction> ProcessMap;
            ProcessMap processMap_;

            void process_getModelDescription(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                             ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_getCoSimulationAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                                   ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_canCreateInstanceFromCS(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                                 ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_canCreateInstanceFromME(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                                 ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_createInstanceFromCS(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                              ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_createInstanceFromME(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                              ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_setupExperiment(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                         ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_enterInitializationMode(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                                 ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_exitInitializationMode(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                                ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_step(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                              ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_reset(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                               ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_terminate(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                   ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_readInteger(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                     ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_readReal(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                  ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_readString(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                    ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_readBoolean(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                     ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_writeInteger(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                      ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_writeReal(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                   ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_writeString(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                     ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_writeBoolean(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                      ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_getFMUstate(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                     ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_setFMUstate(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                     ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_freeFMUstate(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                      ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_serializeFMUstate(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                           ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_deSerializeFMUstate(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                             ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

            void process_getDirectionalDerivative(int32_t seqid, ::apache::thrift::protocol::TProtocol *iprot,
                                                  ::apache::thrift::protocol::TProtocol *oprot, void *callContext);

        public:
            FmuServiceProcessor(::std::shared_ptr<FmuServiceIf> iface) :
                    iface_(iface) {
                processMap_["getModelDescription"] = &FmuServiceProcessor::process_getModelDescription;
                processMap_["getCoSimulationAttributes"] = &FmuServiceProcessor::process_getCoSimulationAttributes;
                processMap_["canCreateInstanceFromCS"] = &FmuServiceProcessor::process_canCreateInstanceFromCS;
                processMap_["canCreateInstanceFromME"] = &FmuServiceProcessor::process_canCreateInstanceFromME;
                processMap_["createInstanceFromCS"] = &FmuServiceProcessor::process_createInstanceFromCS;
                processMap_["createInstanceFromME"] = &FmuServiceProcessor::process_createInstanceFromME;
                processMap_["setupExperiment"] = &FmuServiceProcessor::process_setupExperiment;
                processMap_["enterInitializationMode"] = &FmuServiceProcessor::process_enterInitializationMode;
                processMap_["exitInitializationMode"] = &FmuServiceProcessor::process_exitInitializationMode;
                processMap_["step"] = &FmuServiceProcessor::process_step;
                processMap_["reset"] = &FmuServiceProcessor::process_reset;
                processMap_["terminate"] = &FmuServiceProcessor::process_terminate;
                processMap_["readInteger"] = &FmuServiceProcessor::process_readInteger;
                processMap_["readReal"] = &FmuServiceProcessor::process_readReal;
                processMap_["readString"] = &FmuServiceProcessor::process_readString;
                processMap_["readBoolean"] = &FmuServiceProcessor::process_readBoolean;
                processMap_["writeInteger"] = &FmuServiceProcessor::process_writeInteger;
                processMap_["writeReal"] = &FmuServiceProcessor::process_writeReal;
                processMap_["writeString"] = &FmuServiceProcessor::process_writeString;
                processMap_["writeBoolean"] = &FmuServiceProcessor::process_writeBoolean;
                processMap_["getFMUstate"] = &FmuServiceProcessor::process_getFMUstate;
                processMap_["setFMUstate"] = &FmuServiceProcessor::process_setFMUstate;
                processMap_["freeFMUstate"] = &FmuServiceProcessor::process_freeFMUstate;
                processMap_["serializeFMUstate"] = &FmuServiceProcessor::process_serializeFMUstate;
                processMap_["deSerializeFMUstate"] = &FmuServiceProcessor::process_deSerializeFMUstate;
                processMap_["getDirectionalDerivative"] = &FmuServiceProcessor::process_getDirectionalDerivative;
            }

            virtual ~FmuServiceProcessor() {}
        };

        class FmuServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
        public:
            FmuServiceProcessorFactory(const ::std::shared_ptr<FmuServiceIfFactory> &handlerFactory) :
                    handlerFactory_(handlerFactory) {}

            ::std::shared_ptr<::apache::thrift::TProcessor>
            getProcessor(const ::apache::thrift::TConnectionInfo &connInfo);

        protected:
            ::std::shared_ptr<FmuServiceIfFactory> handlerFactory_;
        };

        class FmuServiceMultiface : virtual public FmuServiceIf {
        public:
            FmuServiceMultiface(std::vector<std::shared_ptr<FmuServiceIf> > &ifaces) : ifaces_(ifaces) {
            }

            virtual ~FmuServiceMultiface() {}

        protected:
            std::vector<std::shared_ptr<FmuServiceIf> > ifaces_;

            FmuServiceMultiface() {}

            void add(::std::shared_ptr<FmuServiceIf> iface) {
                ifaces_.push_back(iface);
            }

        public:
            void getModelDescription(ModelDescription &_return, const FmuId &fmuId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->getModelDescription(_return, fmuId);
                }
                ifaces_[i]->getModelDescription(_return, fmuId);
                return;
            }

            void getCoSimulationAttributes(CoSimulationAttributes &_return, const InstanceId &instanceId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->getCoSimulationAttributes(_return, instanceId);
                }
                ifaces_[i]->getCoSimulationAttributes(_return, instanceId);
                return;
            }

            bool canCreateInstanceFromCS(const FmuId &fmuId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->canCreateInstanceFromCS(fmuId);
                }
                return ifaces_[i]->canCreateInstanceFromCS(fmuId);
            }

            bool canCreateInstanceFromME(const FmuId &fmuId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->canCreateInstanceFromME(fmuId);
                }
                return ifaces_[i]->canCreateInstanceFromME(fmuId);
            }

            void createInstanceFromCS(InstanceId &_return, const FmuId &fmuId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->createInstanceFromCS(_return, fmuId);
                }
                ifaces_[i]->createInstanceFromCS(_return, fmuId);
                return;
            }

            void createInstanceFromME(InstanceId &_return, const FmuId &fmuId, const Solver &solver) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->createInstanceFromME(_return, fmuId, solver);
                }
                ifaces_[i]->createInstanceFromME(_return, fmuId, solver);
                return;
            }

            Status::type setupExperiment(const InstanceId &instanceId, const double start, const double stop,
                                         const double tolerance) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->setupExperiment(instanceId, start, stop, tolerance);
                }
                return ifaces_[i]->setupExperiment(instanceId, start, stop, tolerance);
            }

            Status::type enterInitializationMode(const InstanceId &instanceId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->enterInitializationMode(instanceId);
                }
                return ifaces_[i]->enterInitializationMode(instanceId);
            }

            Status::type exitInitializationMode(const InstanceId &instanceId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->exitInitializationMode(instanceId);
                }
                return ifaces_[i]->exitInitializationMode(instanceId);
            }

            void step(StepResult &_return, const InstanceId &instanceId, const double stepSize) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->step(_return, instanceId, stepSize);
                }
                ifaces_[i]->step(_return, instanceId, stepSize);
                return;
            }

            Status::type reset(const InstanceId &instanceId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->reset(instanceId);
                }
                return ifaces_[i]->reset(instanceId);
            }

            Status::type terminate(const InstanceId &instanceId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->terminate(instanceId);
                }
                return ifaces_[i]->terminate(instanceId);
            }

            void readInteger(IntegerRead &_return, const InstanceId &instanceId, const ValueReferences &vr) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->readInteger(_return, instanceId, vr);
                }
                ifaces_[i]->readInteger(_return, instanceId, vr);
                return;
            }

            void readReal(RealRead &_return, const InstanceId &instanceId, const ValueReferences &vr) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->readReal(_return, instanceId, vr);
                }
                ifaces_[i]->readReal(_return, instanceId, vr);
                return;
            }

            void readString(StringRead &_return, const InstanceId &instanceId, const ValueReferences &vr) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->readString(_return, instanceId, vr);
                }
                ifaces_[i]->readString(_return, instanceId, vr);
                return;
            }

            void readBoolean(BooleanRead &_return, const InstanceId &instanceId, const ValueReferences &vr) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->readBoolean(_return, instanceId, vr);
                }
                ifaces_[i]->readBoolean(_return, instanceId, vr);
                return;
            }

            Status::type writeInteger(const InstanceId &instanceId, const ValueReferences &vr, const IntArray &value) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->writeInteger(instanceId, vr, value);
                }
                return ifaces_[i]->writeInteger(instanceId, vr, value);
            }

            Status::type writeReal(const InstanceId &instanceId, const ValueReferences &vr, const RealArray &value) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->writeReal(instanceId, vr, value);
                }
                return ifaces_[i]->writeReal(instanceId, vr, value);
            }

            Status::type
            writeString(const InstanceId &instanceId, const ValueReferences &vr, const StringArray &value) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->writeString(instanceId, vr, value);
                }
                return ifaces_[i]->writeString(instanceId, vr, value);
            }

            Status::type
            writeBoolean(const InstanceId &instanceId, const ValueReferences &vr, const BooleanArray &value) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->writeBoolean(instanceId, vr, value);
                }
                return ifaces_[i]->writeBoolean(instanceId, vr, value);
            }

            void getFMUstate(GetFmuStateResult &_return, const InstanceId &instanceId) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->getFMUstate(_return, instanceId);
                }
                ifaces_[i]->getFMUstate(_return, instanceId);
                return;
            }

            Status::type setFMUstate(const InstanceId &instanceId, const FmuState state) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->setFMUstate(instanceId, state);
                }
                return ifaces_[i]->setFMUstate(instanceId, state);
            }

            Status::type freeFMUstate(const InstanceId &instanceId, const FmuState state) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->freeFMUstate(instanceId, state);
                }
                return ifaces_[i]->freeFMUstate(instanceId, state);
            }

            void
            serializeFMUstate(SerializeFmuStateResult &_return, const InstanceId &instanceId, const FmuState state) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->serializeFMUstate(_return, instanceId, state);
                }
                ifaces_[i]->serializeFMUstate(_return, instanceId, state);
                return;
            }

            void deSerializeFMUstate(DeSerializeFmuStateResult &_return, const InstanceId &instanceId,
                                     const std::string &state) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->deSerializeFMUstate(_return, instanceId, state);
                }
                ifaces_[i]->deSerializeFMUstate(_return, instanceId, state);
                return;
            }

            void getDirectionalDerivative(DirectionalDerivativeResult &_return, const InstanceId &instanceId,
                                          const ValueReferences &vUnknownRef, const ValueReferences &vKnownRef,
                                          const std::vector<double> &dvKnownRef) {
                size_t sz = ifaces_.size();
                size_t i = 0;
                for (; i < (sz - 1); ++i) {
                    ifaces_[i]->getDirectionalDerivative(_return, instanceId, vUnknownRef, vKnownRef, dvKnownRef);
                }
                ifaces_[i]->getDirectionalDerivative(_return, instanceId, vUnknownRef, vKnownRef, dvKnownRef);
                return;
            }

        };

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
        class FmuServiceConcurrentClient : virtual public FmuServiceIf {
        public:
            FmuServiceConcurrentClient(std::shared_ptr<::apache::thrift::protocol::TProtocol> prot) {
                setProtocol(prot);
            }

            FmuServiceConcurrentClient(std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
                                       std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot) {
                setProtocol(iprot, oprot);
            }

        private:
            void setProtocol(std::shared_ptr<::apache::thrift::protocol::TProtocol> prot) {
                setProtocol(prot, prot);
            }

            void setProtocol(std::shared_ptr<::apache::thrift::protocol::TProtocol> iprot,
                             std::shared_ptr<::apache::thrift::protocol::TProtocol> oprot) {
                piprot_ = iprot;
                poprot_ = oprot;
                iprot_ = iprot.get();
                oprot_ = oprot.get();
            }

        public:
            std::shared_ptr<::apache::thrift::protocol::TProtocol> getInputProtocol() {
                return piprot_;
            }

            std::shared_ptr<::apache::thrift::protocol::TProtocol> getOutputProtocol() {
                return poprot_;
            }

            void getModelDescription(ModelDescription &_return, const FmuId &fmuId);

            int32_t send_getModelDescription(const FmuId &fmuId);

            void recv_getModelDescription(ModelDescription &_return, const int32_t seqid);

            void getCoSimulationAttributes(CoSimulationAttributes &_return, const InstanceId &instanceId);

            int32_t send_getCoSimulationAttributes(const InstanceId &instanceId);

            void recv_getCoSimulationAttributes(CoSimulationAttributes &_return, const int32_t seqid);

            bool canCreateInstanceFromCS(const FmuId &fmuId);

            int32_t send_canCreateInstanceFromCS(const FmuId &fmuId);

            bool recv_canCreateInstanceFromCS(const int32_t seqid);

            bool canCreateInstanceFromME(const FmuId &fmuId);

            int32_t send_canCreateInstanceFromME(const FmuId &fmuId);

            bool recv_canCreateInstanceFromME(const int32_t seqid);

            void createInstanceFromCS(InstanceId &_return, const FmuId &fmuId);

            int32_t send_createInstanceFromCS(const FmuId &fmuId);

            void recv_createInstanceFromCS(InstanceId &_return, const int32_t seqid);

            void createInstanceFromME(InstanceId &_return, const FmuId &fmuId, const Solver &solver);

            int32_t send_createInstanceFromME(const FmuId &fmuId, const Solver &solver);

            void recv_createInstanceFromME(InstanceId &_return, const int32_t seqid);

            Status::type setupExperiment(const InstanceId &instanceId, const double start, const double stop,
                                         const double tolerance);

            int32_t send_setupExperiment(const InstanceId &instanceId, const double start, const double stop,
                                         const double tolerance);

            Status::type recv_setupExperiment(const int32_t seqid);

            Status::type enterInitializationMode(const InstanceId &instanceId);

            int32_t send_enterInitializationMode(const InstanceId &instanceId);

            Status::type recv_enterInitializationMode(const int32_t seqid);

            Status::type exitInitializationMode(const InstanceId &instanceId);

            int32_t send_exitInitializationMode(const InstanceId &instanceId);

            Status::type recv_exitInitializationMode(const int32_t seqid);

            void step(StepResult &_return, const InstanceId &instanceId, const double stepSize);

            int32_t send_step(const InstanceId &instanceId, const double stepSize);

            void recv_step(StepResult &_return, const int32_t seqid);

            Status::type reset(const InstanceId &instanceId);

            int32_t send_reset(const InstanceId &instanceId);

            Status::type recv_reset(const int32_t seqid);

            Status::type terminate(const InstanceId &instanceId);

            int32_t send_terminate(const InstanceId &instanceId);

            Status::type recv_terminate(const int32_t seqid);

            void readInteger(IntegerRead &_return, const InstanceId &instanceId, const ValueReferences &vr);

            int32_t send_readInteger(const InstanceId &instanceId, const ValueReferences &vr);

            void recv_readInteger(IntegerRead &_return, const int32_t seqid);

            void readReal(RealRead &_return, const InstanceId &instanceId, const ValueReferences &vr);

            int32_t send_readReal(const InstanceId &instanceId, const ValueReferences &vr);

            void recv_readReal(RealRead &_return, const int32_t seqid);

            void readString(StringRead &_return, const InstanceId &instanceId, const ValueReferences &vr);

            int32_t send_readString(const InstanceId &instanceId, const ValueReferences &vr);

            void recv_readString(StringRead &_return, const int32_t seqid);

            void readBoolean(BooleanRead &_return, const InstanceId &instanceId, const ValueReferences &vr);

            int32_t send_readBoolean(const InstanceId &instanceId, const ValueReferences &vr);

            void recv_readBoolean(BooleanRead &_return, const int32_t seqid);

            Status::type writeInteger(const InstanceId &instanceId, const ValueReferences &vr, const IntArray &value);

            int32_t send_writeInteger(const InstanceId &instanceId, const ValueReferences &vr, const IntArray &value);

            Status::type recv_writeInteger(const int32_t seqid);

            Status::type writeReal(const InstanceId &instanceId, const ValueReferences &vr, const RealArray &value);

            int32_t send_writeReal(const InstanceId &instanceId, const ValueReferences &vr, const RealArray &value);

            Status::type recv_writeReal(const int32_t seqid);

            Status::type writeString(const InstanceId &instanceId, const ValueReferences &vr, const StringArray &value);

            int32_t send_writeString(const InstanceId &instanceId, const ValueReferences &vr, const StringArray &value);

            Status::type recv_writeString(const int32_t seqid);

            Status::type
            writeBoolean(const InstanceId &instanceId, const ValueReferences &vr, const BooleanArray &value);

            int32_t
            send_writeBoolean(const InstanceId &instanceId, const ValueReferences &vr, const BooleanArray &value);

            Status::type recv_writeBoolean(const int32_t seqid);

            void getFMUstate(GetFmuStateResult &_return, const InstanceId &instanceId);

            int32_t send_getFMUstate(const InstanceId &instanceId);

            void recv_getFMUstate(GetFmuStateResult &_return, const int32_t seqid);

            Status::type setFMUstate(const InstanceId &instanceId, const FmuState state);

            int32_t send_setFMUstate(const InstanceId &instanceId, const FmuState state);

            Status::type recv_setFMUstate(const int32_t seqid);

            Status::type freeFMUstate(const InstanceId &instanceId, const FmuState state);

            int32_t send_freeFMUstate(const InstanceId &instanceId, const FmuState state);

            Status::type recv_freeFMUstate(const int32_t seqid);

            void
            serializeFMUstate(SerializeFmuStateResult &_return, const InstanceId &instanceId, const FmuState state);

            int32_t send_serializeFMUstate(const InstanceId &instanceId, const FmuState state);

            void recv_serializeFMUstate(SerializeFmuStateResult &_return, const int32_t seqid);

            void deSerializeFMUstate(DeSerializeFmuStateResult &_return, const InstanceId &instanceId,
                                     const std::string &state);

            int32_t send_deSerializeFMUstate(const InstanceId &instanceId, const std::string &state);

            void recv_deSerializeFMUstate(DeSerializeFmuStateResult &_return, const int32_t seqid);

            void getDirectionalDerivative(DirectionalDerivativeResult &_return, const InstanceId &instanceId,
                                          const ValueReferences &vUnknownRef, const ValueReferences &vKnownRef,
                                          const std::vector<double> &dvKnownRef);

            int32_t send_getDirectionalDerivative(const InstanceId &instanceId, const ValueReferences &vUnknownRef,
                                                  const ValueReferences &vKnownRef,
                                                  const std::vector<double> &dvKnownRef);

            void recv_getDirectionalDerivative(DirectionalDerivativeResult &_return, const int32_t seqid);

        protected:
            std::shared_ptr<::apache::thrift::protocol::TProtocol> piprot_;
            std::shared_ptr<::apache::thrift::protocol::TProtocol> poprot_;
            ::apache::thrift::protocol::TProtocol *iprot_;
            ::apache::thrift::protocol::TProtocol *oprot_;
            ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
        };

#ifdef _MSC_VER
#pragma warning( pop )
#endif

    }
} // namespace

#endif
