/**
 * Autogenerated by Thrift Compiler (1.0.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef fmu_service_H
#define fmu_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "service_types.hpp"

namespace fmuproxy { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class fmu_serviceIf {
 public:
  virtual ~fmu_serviceIf() {}
  virtual void load_from_url(FmuId& _return, const std::string& url) = 0;
  virtual void load_from_file(FmuId& _return, const std::string& name, const std::string& data) = 0;
  virtual void get_model_description(ModelDescription& _return, const FmuId& fmuId) = 0;
  virtual void get_co_simulation_attributes(CoSimulationAttributes& _return, const InstanceId& instanceId) = 0;
  virtual bool can_create_instance_from_cs(const FmuId& fmuId) = 0;
  virtual bool can_create_instance_from_me(const FmuId& fmuId) = 0;
  virtual void create_instance_from_cs(InstanceId& _return, const FmuId& fmuId) = 0;
  virtual void create_instance_from_me(InstanceId& _return, const FmuId& fmuId, const Solver& solver) = 0;
  virtual Status::type setup_experiment(const InstanceId& instanceId, const double start, const double stop, const double tolerance) = 0;
  virtual Status::type enter_initialization_mode(const InstanceId& instanceId) = 0;
  virtual Status::type exit_initialization_mode(const InstanceId& instanceId) = 0;
  virtual void step(StepResult& _return, const InstanceId& instanceId, const double stepSize) = 0;
  virtual Status::type reset(const InstanceId& instanceId) = 0;
  virtual Status::type terminate(const InstanceId& instanceId) = 0;
  virtual void read_integer(IntegerRead& _return, const InstanceId& instanceId, const ValueReferences& vr) = 0;
  virtual void read_real(RealRead& _return, const InstanceId& instanceId, const ValueReferences& vr) = 0;
  virtual void read_string(StringRead& _return, const InstanceId& instanceId, const ValueReferences& vr) = 0;
  virtual void read_boolean(BooleanRead& _return, const InstanceId& instanceId, const ValueReferences& vr) = 0;
  virtual Status::type write_integer(const InstanceId& instanceId, const ValueReferences& vr, const IntArray& value) = 0;
  virtual Status::type write_real(const InstanceId& instanceId, const ValueReferences& vr, const RealArray& value) = 0;
  virtual Status::type write_string(const InstanceId& instanceId, const ValueReferences& vr, const StringArray& value) = 0;
  virtual Status::type write_boolean(const InstanceId& instanceId, const ValueReferences& vr, const BooleanArray& value) = 0;
  virtual void get_directional_derivative(DirectionalDerivativeResult& _return, const InstanceId& instanceId, const ValueReferences& vUnknownRef, const ValueReferences& vKnownRef, const std::vector<double> & dvKnownRef) = 0;
};

class fmu_serviceIfFactory {
 public:
  typedef fmu_serviceIf Handler;

  virtual ~fmu_serviceIfFactory() {}

  virtual fmu_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(fmu_serviceIf* /* handler */) = 0;
};

class fmu_serviceIfSingletonFactory : virtual public fmu_serviceIfFactory {
 public:
  fmu_serviceIfSingletonFactory(const ::std::shared_ptr<fmu_serviceIf>& iface) : iface_(iface) {}
  virtual ~fmu_serviceIfSingletonFactory() {}

  virtual fmu_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(fmu_serviceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<fmu_serviceIf> iface_;
};

class fmu_serviceNull : virtual public fmu_serviceIf {
 public:
  virtual ~fmu_serviceNull() {}
  void load_from_url(FmuId& /* _return */, const std::string& /* url */) {
    return;
  }
  void load_from_file(FmuId& /* _return */, const std::string& /* name */, const std::string& /* data */) {
    return;
  }
  void get_model_description(ModelDescription& /* _return */, const FmuId& /* fmuId */) {
    return;
  }
  void get_co_simulation_attributes(CoSimulationAttributes& /* _return */, const InstanceId& /* instanceId */) {
    return;
  }
  bool can_create_instance_from_cs(const FmuId& /* fmuId */) {
    bool _return = false;
    return _return;
  }
  bool can_create_instance_from_me(const FmuId& /* fmuId */) {
    bool _return = false;
    return _return;
  }
  void create_instance_from_cs(InstanceId& /* _return */, const FmuId& /* fmuId */) {
    return;
  }
  void create_instance_from_me(InstanceId& /* _return */, const FmuId& /* fmuId */, const Solver& /* solver */) {
    return;
  }
  Status::type setup_experiment(const InstanceId& /* instanceId */, const double /* start */, const double /* stop */, const double /* tolerance */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  Status::type enter_initialization_mode(const InstanceId& /* instanceId */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  Status::type exit_initialization_mode(const InstanceId& /* instanceId */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  void step(StepResult& /* _return */, const InstanceId& /* instanceId */, const double /* stepSize */) {
    return;
  }
  Status::type reset(const InstanceId& /* instanceId */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  Status::type terminate(const InstanceId& /* instanceId */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  void read_integer(IntegerRead& /* _return */, const InstanceId& /* instanceId */, const ValueReferences& /* vr */) {
    return;
  }
  void read_real(RealRead& /* _return */, const InstanceId& /* instanceId */, const ValueReferences& /* vr */) {
    return;
  }
  void read_string(StringRead& /* _return */, const InstanceId& /* instanceId */, const ValueReferences& /* vr */) {
    return;
  }
  void read_boolean(BooleanRead& /* _return */, const InstanceId& /* instanceId */, const ValueReferences& /* vr */) {
    return;
  }
  Status::type write_integer(const InstanceId& /* instanceId */, const ValueReferences& /* vr */, const IntArray& /* value */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  Status::type write_real(const InstanceId& /* instanceId */, const ValueReferences& /* vr */, const RealArray& /* value */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  Status::type write_string(const InstanceId& /* instanceId */, const ValueReferences& /* vr */, const StringArray& /* value */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  Status::type write_boolean(const InstanceId& /* instanceId */, const ValueReferences& /* vr */, const BooleanArray& /* value */) {
    Status::type _return = (Status::type)0;
    return _return;
  }
  void get_directional_derivative(DirectionalDerivativeResult& /* _return */, const InstanceId& /* instanceId */, const ValueReferences& /* vUnknownRef */, const ValueReferences& /* vKnownRef */, const std::vector<double> & /* dvKnownRef */) {
    return;
  }
};

typedef struct _fmu_service_load_from_url_args__isset {
  _fmu_service_load_from_url_args__isset() : url(false) {}
  bool url :1;
} _fmu_service_load_from_url_args__isset;

class fmu_service_load_from_url_args {
 public:

  fmu_service_load_from_url_args(const fmu_service_load_from_url_args&);
  fmu_service_load_from_url_args& operator=(const fmu_service_load_from_url_args&);
  fmu_service_load_from_url_args() : url() {
  }

  virtual ~fmu_service_load_from_url_args() noexcept;
  std::string url;

  _fmu_service_load_from_url_args__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const fmu_service_load_from_url_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const fmu_service_load_from_url_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_load_from_url_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_load_from_url_pargs {
 public:


  virtual ~fmu_service_load_from_url_pargs() noexcept;
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_load_from_url_result__isset {
  _fmu_service_load_from_url_result__isset() : success(false) {}
  bool success :1;
} _fmu_service_load_from_url_result__isset;

class fmu_service_load_from_url_result {
 public:

  fmu_service_load_from_url_result(const fmu_service_load_from_url_result&);
  fmu_service_load_from_url_result& operator=(const fmu_service_load_from_url_result&);
  fmu_service_load_from_url_result() : success() {
  }

  virtual ~fmu_service_load_from_url_result() noexcept;
  FmuId success;

  _fmu_service_load_from_url_result__isset __isset;

  void __set_success(const FmuId& val);

  bool operator == (const fmu_service_load_from_url_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fmu_service_load_from_url_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_load_from_url_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_load_from_url_presult__isset {
  _fmu_service_load_from_url_presult__isset() : success(false) {}
  bool success :1;
} _fmu_service_load_from_url_presult__isset;

class fmu_service_load_from_url_presult {
 public:


  virtual ~fmu_service_load_from_url_presult() noexcept;
  FmuId* success;

  _fmu_service_load_from_url_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_load_from_file_args__isset {
  _fmu_service_load_from_file_args__isset() : name(false), data(false) {}
  bool name :1;
  bool data :1;
} _fmu_service_load_from_file_args__isset;

class fmu_service_load_from_file_args {
 public:

  fmu_service_load_from_file_args(const fmu_service_load_from_file_args&);
  fmu_service_load_from_file_args& operator=(const fmu_service_load_from_file_args&);
  fmu_service_load_from_file_args() : name(), data() {
  }

  virtual ~fmu_service_load_from_file_args() noexcept;
  std::string name;
  std::string data;

  _fmu_service_load_from_file_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const fmu_service_load_from_file_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const fmu_service_load_from_file_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_load_from_file_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_load_from_file_pargs {
 public:


  virtual ~fmu_service_load_from_file_pargs() noexcept;
  const std::string* name;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_load_from_file_result__isset {
  _fmu_service_load_from_file_result__isset() : success(false) {}
  bool success :1;
} _fmu_service_load_from_file_result__isset;

class fmu_service_load_from_file_result {
 public:

  fmu_service_load_from_file_result(const fmu_service_load_from_file_result&);
  fmu_service_load_from_file_result& operator=(const fmu_service_load_from_file_result&);
  fmu_service_load_from_file_result() : success() {
  }

  virtual ~fmu_service_load_from_file_result() noexcept;
  FmuId success;

  _fmu_service_load_from_file_result__isset __isset;

  void __set_success(const FmuId& val);

  bool operator == (const fmu_service_load_from_file_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fmu_service_load_from_file_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_load_from_file_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_load_from_file_presult__isset {
  _fmu_service_load_from_file_presult__isset() : success(false) {}
  bool success :1;
} _fmu_service_load_from_file_presult__isset;

class fmu_service_load_from_file_presult {
 public:


  virtual ~fmu_service_load_from_file_presult() noexcept;
  FmuId* success;

  _fmu_service_load_from_file_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_get_model_description_args__isset {
  _fmu_service_get_model_description_args__isset() : fmuId(false) {}
  bool fmuId :1;
} _fmu_service_get_model_description_args__isset;

class fmu_service_get_model_description_args {
 public:

  fmu_service_get_model_description_args(const fmu_service_get_model_description_args&);
  fmu_service_get_model_description_args& operator=(const fmu_service_get_model_description_args&);
  fmu_service_get_model_description_args() : fmuId() {
  }

  virtual ~fmu_service_get_model_description_args() noexcept;
  FmuId fmuId;

  _fmu_service_get_model_description_args__isset __isset;

  void __set_fmuId(const FmuId& val);

  bool operator == (const fmu_service_get_model_description_args & rhs) const
  {
    if (!(fmuId == rhs.fmuId))
      return false;
    return true;
  }
  bool operator != (const fmu_service_get_model_description_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_get_model_description_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_get_model_description_pargs {
 public:


  virtual ~fmu_service_get_model_description_pargs() noexcept;
  const FmuId* fmuId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_get_model_description_result__isset {
  _fmu_service_get_model_description_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_get_model_description_result__isset;

class fmu_service_get_model_description_result {
 public:

  fmu_service_get_model_description_result(const fmu_service_get_model_description_result&);
  fmu_service_get_model_description_result& operator=(const fmu_service_get_model_description_result&);
  fmu_service_get_model_description_result() {
  }

  virtual ~fmu_service_get_model_description_result() noexcept;
  ModelDescription success;
  NoSuchFmuException ex;

  _fmu_service_get_model_description_result__isset __isset;

  void __set_success(const ModelDescription& val);

  void __set_ex(const NoSuchFmuException& val);

  bool operator == (const fmu_service_get_model_description_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_get_model_description_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_get_model_description_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_get_model_description_presult__isset {
  _fmu_service_get_model_description_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_get_model_description_presult__isset;

class fmu_service_get_model_description_presult {
 public:


  virtual ~fmu_service_get_model_description_presult() noexcept;
  ModelDescription* success;
  NoSuchFmuException ex;

  _fmu_service_get_model_description_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_get_co_simulation_attributes_args__isset {
  _fmu_service_get_co_simulation_attributes_args__isset() : instanceId(false) {}
  bool instanceId :1;
} _fmu_service_get_co_simulation_attributes_args__isset;

class fmu_service_get_co_simulation_attributes_args {
 public:

  fmu_service_get_co_simulation_attributes_args(const fmu_service_get_co_simulation_attributes_args&);
  fmu_service_get_co_simulation_attributes_args& operator=(const fmu_service_get_co_simulation_attributes_args&);
  fmu_service_get_co_simulation_attributes_args() : instanceId() {
  }

  virtual ~fmu_service_get_co_simulation_attributes_args() noexcept;
  InstanceId instanceId;

  _fmu_service_get_co_simulation_attributes_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  bool operator == (const fmu_service_get_co_simulation_attributes_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    return true;
  }
  bool operator != (const fmu_service_get_co_simulation_attributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_get_co_simulation_attributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_get_co_simulation_attributes_pargs {
 public:


  virtual ~fmu_service_get_co_simulation_attributes_pargs() noexcept;
  const InstanceId* instanceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_get_co_simulation_attributes_result__isset {
  _fmu_service_get_co_simulation_attributes_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_get_co_simulation_attributes_result__isset;

class fmu_service_get_co_simulation_attributes_result {
 public:

  fmu_service_get_co_simulation_attributes_result(const fmu_service_get_co_simulation_attributes_result&);
  fmu_service_get_co_simulation_attributes_result& operator=(const fmu_service_get_co_simulation_attributes_result&);
  fmu_service_get_co_simulation_attributes_result() {
  }

  virtual ~fmu_service_get_co_simulation_attributes_result() noexcept;
  CoSimulationAttributes success;
  NoSuchInstanceException ex;

  _fmu_service_get_co_simulation_attributes_result__isset __isset;

  void __set_success(const CoSimulationAttributes& val);

  void __set_ex(const NoSuchInstanceException& val);

  bool operator == (const fmu_service_get_co_simulation_attributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_get_co_simulation_attributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_get_co_simulation_attributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_get_co_simulation_attributes_presult__isset {
  _fmu_service_get_co_simulation_attributes_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_get_co_simulation_attributes_presult__isset;

class fmu_service_get_co_simulation_attributes_presult {
 public:


  virtual ~fmu_service_get_co_simulation_attributes_presult() noexcept;
  CoSimulationAttributes* success;
  NoSuchInstanceException ex;

  _fmu_service_get_co_simulation_attributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_can_create_instance_from_cs_args__isset {
  _fmu_service_can_create_instance_from_cs_args__isset() : fmuId(false) {}
  bool fmuId :1;
} _fmu_service_can_create_instance_from_cs_args__isset;

class fmu_service_can_create_instance_from_cs_args {
 public:

  fmu_service_can_create_instance_from_cs_args(const fmu_service_can_create_instance_from_cs_args&);
  fmu_service_can_create_instance_from_cs_args& operator=(const fmu_service_can_create_instance_from_cs_args&);
  fmu_service_can_create_instance_from_cs_args() : fmuId() {
  }

  virtual ~fmu_service_can_create_instance_from_cs_args() noexcept;
  FmuId fmuId;

  _fmu_service_can_create_instance_from_cs_args__isset __isset;

  void __set_fmuId(const FmuId& val);

  bool operator == (const fmu_service_can_create_instance_from_cs_args & rhs) const
  {
    if (!(fmuId == rhs.fmuId))
      return false;
    return true;
  }
  bool operator != (const fmu_service_can_create_instance_from_cs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_can_create_instance_from_cs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_can_create_instance_from_cs_pargs {
 public:


  virtual ~fmu_service_can_create_instance_from_cs_pargs() noexcept;
  const FmuId* fmuId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_can_create_instance_from_cs_result__isset {
  _fmu_service_can_create_instance_from_cs_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_can_create_instance_from_cs_result__isset;

class fmu_service_can_create_instance_from_cs_result {
 public:

  fmu_service_can_create_instance_from_cs_result(const fmu_service_can_create_instance_from_cs_result&);
  fmu_service_can_create_instance_from_cs_result& operator=(const fmu_service_can_create_instance_from_cs_result&);
  fmu_service_can_create_instance_from_cs_result() : success(0) {
  }

  virtual ~fmu_service_can_create_instance_from_cs_result() noexcept;
  bool success;
  NoSuchFmuException ex;

  _fmu_service_can_create_instance_from_cs_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const NoSuchFmuException& val);

  bool operator == (const fmu_service_can_create_instance_from_cs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_can_create_instance_from_cs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_can_create_instance_from_cs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_can_create_instance_from_cs_presult__isset {
  _fmu_service_can_create_instance_from_cs_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_can_create_instance_from_cs_presult__isset;

class fmu_service_can_create_instance_from_cs_presult {
 public:


  virtual ~fmu_service_can_create_instance_from_cs_presult() noexcept;
  bool* success;
  NoSuchFmuException ex;

  _fmu_service_can_create_instance_from_cs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_can_create_instance_from_me_args__isset {
  _fmu_service_can_create_instance_from_me_args__isset() : fmuId(false) {}
  bool fmuId :1;
} _fmu_service_can_create_instance_from_me_args__isset;

class fmu_service_can_create_instance_from_me_args {
 public:

  fmu_service_can_create_instance_from_me_args(const fmu_service_can_create_instance_from_me_args&);
  fmu_service_can_create_instance_from_me_args& operator=(const fmu_service_can_create_instance_from_me_args&);
  fmu_service_can_create_instance_from_me_args() : fmuId() {
  }

  virtual ~fmu_service_can_create_instance_from_me_args() noexcept;
  FmuId fmuId;

  _fmu_service_can_create_instance_from_me_args__isset __isset;

  void __set_fmuId(const FmuId& val);

  bool operator == (const fmu_service_can_create_instance_from_me_args & rhs) const
  {
    if (!(fmuId == rhs.fmuId))
      return false;
    return true;
  }
  bool operator != (const fmu_service_can_create_instance_from_me_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_can_create_instance_from_me_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_can_create_instance_from_me_pargs {
 public:


  virtual ~fmu_service_can_create_instance_from_me_pargs() noexcept;
  const FmuId* fmuId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_can_create_instance_from_me_result__isset {
  _fmu_service_can_create_instance_from_me_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_can_create_instance_from_me_result__isset;

class fmu_service_can_create_instance_from_me_result {
 public:

  fmu_service_can_create_instance_from_me_result(const fmu_service_can_create_instance_from_me_result&);
  fmu_service_can_create_instance_from_me_result& operator=(const fmu_service_can_create_instance_from_me_result&);
  fmu_service_can_create_instance_from_me_result() : success(0) {
  }

  virtual ~fmu_service_can_create_instance_from_me_result() noexcept;
  bool success;
  NoSuchFmuException ex;

  _fmu_service_can_create_instance_from_me_result__isset __isset;

  void __set_success(const bool val);

  void __set_ex(const NoSuchFmuException& val);

  bool operator == (const fmu_service_can_create_instance_from_me_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_can_create_instance_from_me_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_can_create_instance_from_me_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_can_create_instance_from_me_presult__isset {
  _fmu_service_can_create_instance_from_me_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_can_create_instance_from_me_presult__isset;

class fmu_service_can_create_instance_from_me_presult {
 public:


  virtual ~fmu_service_can_create_instance_from_me_presult() noexcept;
  bool* success;
  NoSuchFmuException ex;

  _fmu_service_can_create_instance_from_me_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_create_instance_from_cs_args__isset {
  _fmu_service_create_instance_from_cs_args__isset() : fmuId(false) {}
  bool fmuId :1;
} _fmu_service_create_instance_from_cs_args__isset;

class fmu_service_create_instance_from_cs_args {
 public:

  fmu_service_create_instance_from_cs_args(const fmu_service_create_instance_from_cs_args&);
  fmu_service_create_instance_from_cs_args& operator=(const fmu_service_create_instance_from_cs_args&);
  fmu_service_create_instance_from_cs_args() : fmuId() {
  }

  virtual ~fmu_service_create_instance_from_cs_args() noexcept;
  FmuId fmuId;

  _fmu_service_create_instance_from_cs_args__isset __isset;

  void __set_fmuId(const FmuId& val);

  bool operator == (const fmu_service_create_instance_from_cs_args & rhs) const
  {
    if (!(fmuId == rhs.fmuId))
      return false;
    return true;
  }
  bool operator != (const fmu_service_create_instance_from_cs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_create_instance_from_cs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_create_instance_from_cs_pargs {
 public:


  virtual ~fmu_service_create_instance_from_cs_pargs() noexcept;
  const FmuId* fmuId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_create_instance_from_cs_result__isset {
  _fmu_service_create_instance_from_cs_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_create_instance_from_cs_result__isset;

class fmu_service_create_instance_from_cs_result {
 public:

  fmu_service_create_instance_from_cs_result(const fmu_service_create_instance_from_cs_result&);
  fmu_service_create_instance_from_cs_result& operator=(const fmu_service_create_instance_from_cs_result&);
  fmu_service_create_instance_from_cs_result() : success() {
  }

  virtual ~fmu_service_create_instance_from_cs_result() noexcept;
  InstanceId success;
  UnsupportedOperationException ex1;
  NoSuchFmuException ex2;

  _fmu_service_create_instance_from_cs_result__isset __isset;

  void __set_success(const InstanceId& val);

  void __set_ex1(const UnsupportedOperationException& val);

  void __set_ex2(const NoSuchFmuException& val);

  bool operator == (const fmu_service_create_instance_from_cs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_create_instance_from_cs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_create_instance_from_cs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_create_instance_from_cs_presult__isset {
  _fmu_service_create_instance_from_cs_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_create_instance_from_cs_presult__isset;

class fmu_service_create_instance_from_cs_presult {
 public:


  virtual ~fmu_service_create_instance_from_cs_presult() noexcept;
  InstanceId* success;
  UnsupportedOperationException ex1;
  NoSuchFmuException ex2;

  _fmu_service_create_instance_from_cs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_create_instance_from_me_args__isset {
  _fmu_service_create_instance_from_me_args__isset() : fmuId(false), solver(false) {}
  bool fmuId :1;
  bool solver :1;
} _fmu_service_create_instance_from_me_args__isset;

class fmu_service_create_instance_from_me_args {
 public:

  fmu_service_create_instance_from_me_args(const fmu_service_create_instance_from_me_args&);
  fmu_service_create_instance_from_me_args& operator=(const fmu_service_create_instance_from_me_args&);
  fmu_service_create_instance_from_me_args() : fmuId() {
  }

  virtual ~fmu_service_create_instance_from_me_args() noexcept;
  FmuId fmuId;
  Solver solver;

  _fmu_service_create_instance_from_me_args__isset __isset;

  void __set_fmuId(const FmuId& val);

  void __set_solver(const Solver& val);

  bool operator == (const fmu_service_create_instance_from_me_args & rhs) const
  {
    if (!(fmuId == rhs.fmuId))
      return false;
    if (!(solver == rhs.solver))
      return false;
    return true;
  }
  bool operator != (const fmu_service_create_instance_from_me_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_create_instance_from_me_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_create_instance_from_me_pargs {
 public:


  virtual ~fmu_service_create_instance_from_me_pargs() noexcept;
  const FmuId* fmuId;
  const Solver* solver;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_create_instance_from_me_result__isset {
  _fmu_service_create_instance_from_me_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_create_instance_from_me_result__isset;

class fmu_service_create_instance_from_me_result {
 public:

  fmu_service_create_instance_from_me_result(const fmu_service_create_instance_from_me_result&);
  fmu_service_create_instance_from_me_result& operator=(const fmu_service_create_instance_from_me_result&);
  fmu_service_create_instance_from_me_result() : success() {
  }

  virtual ~fmu_service_create_instance_from_me_result() noexcept;
  InstanceId success;
  UnsupportedOperationException ex1;
  NoSuchFmuException ex2;

  _fmu_service_create_instance_from_me_result__isset __isset;

  void __set_success(const InstanceId& val);

  void __set_ex1(const UnsupportedOperationException& val);

  void __set_ex2(const NoSuchFmuException& val);

  bool operator == (const fmu_service_create_instance_from_me_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_create_instance_from_me_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_create_instance_from_me_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_create_instance_from_me_presult__isset {
  _fmu_service_create_instance_from_me_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_create_instance_from_me_presult__isset;

class fmu_service_create_instance_from_me_presult {
 public:


  virtual ~fmu_service_create_instance_from_me_presult() noexcept;
  InstanceId* success;
  UnsupportedOperationException ex1;
  NoSuchFmuException ex2;

  _fmu_service_create_instance_from_me_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_setup_experiment_args__isset {
  _fmu_service_setup_experiment_args__isset() : instanceId(false), start(false), stop(false), tolerance(false) {}
  bool instanceId :1;
  bool start :1;
  bool stop :1;
  bool tolerance :1;
} _fmu_service_setup_experiment_args__isset;

class fmu_service_setup_experiment_args {
 public:

  fmu_service_setup_experiment_args(const fmu_service_setup_experiment_args&);
  fmu_service_setup_experiment_args& operator=(const fmu_service_setup_experiment_args&);
  fmu_service_setup_experiment_args() : instanceId(), start(0), stop(0), tolerance(0) {
  }

  virtual ~fmu_service_setup_experiment_args() noexcept;
  InstanceId instanceId;
  double start;
  double stop;
  double tolerance;

  _fmu_service_setup_experiment_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_start(const double val);

  void __set_stop(const double val);

  void __set_tolerance(const double val);

  bool operator == (const fmu_service_setup_experiment_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    if (!(tolerance == rhs.tolerance))
      return false;
    return true;
  }
  bool operator != (const fmu_service_setup_experiment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_setup_experiment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_setup_experiment_pargs {
 public:


  virtual ~fmu_service_setup_experiment_pargs() noexcept;
  const InstanceId* instanceId;
  const double* start;
  const double* stop;
  const double* tolerance;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_setup_experiment_result__isset {
  _fmu_service_setup_experiment_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_setup_experiment_result__isset;

class fmu_service_setup_experiment_result {
 public:

  fmu_service_setup_experiment_result(const fmu_service_setup_experiment_result&);
  fmu_service_setup_experiment_result& operator=(const fmu_service_setup_experiment_result&);
  fmu_service_setup_experiment_result() : success((Status::type)0) {
  }

  virtual ~fmu_service_setup_experiment_result() noexcept;
  Status::type success;
  NoSuchInstanceException ex;

  _fmu_service_setup_experiment_result__isset __isset;

  void __set_success(const Status::type val);

  void __set_ex(const NoSuchInstanceException& val);

  bool operator == (const fmu_service_setup_experiment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_setup_experiment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_setup_experiment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_setup_experiment_presult__isset {
  _fmu_service_setup_experiment_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_setup_experiment_presult__isset;

class fmu_service_setup_experiment_presult {
 public:


  virtual ~fmu_service_setup_experiment_presult() noexcept;
  Status::type* success;
  NoSuchInstanceException ex;

  _fmu_service_setup_experiment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_enter_initialization_mode_args__isset {
  _fmu_service_enter_initialization_mode_args__isset() : instanceId(false) {}
  bool instanceId :1;
} _fmu_service_enter_initialization_mode_args__isset;

class fmu_service_enter_initialization_mode_args {
 public:

  fmu_service_enter_initialization_mode_args(const fmu_service_enter_initialization_mode_args&);
  fmu_service_enter_initialization_mode_args& operator=(const fmu_service_enter_initialization_mode_args&);
  fmu_service_enter_initialization_mode_args() : instanceId() {
  }

  virtual ~fmu_service_enter_initialization_mode_args() noexcept;
  InstanceId instanceId;

  _fmu_service_enter_initialization_mode_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  bool operator == (const fmu_service_enter_initialization_mode_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    return true;
  }
  bool operator != (const fmu_service_enter_initialization_mode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_enter_initialization_mode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_enter_initialization_mode_pargs {
 public:


  virtual ~fmu_service_enter_initialization_mode_pargs() noexcept;
  const InstanceId* instanceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_enter_initialization_mode_result__isset {
  _fmu_service_enter_initialization_mode_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_enter_initialization_mode_result__isset;

class fmu_service_enter_initialization_mode_result {
 public:

  fmu_service_enter_initialization_mode_result(const fmu_service_enter_initialization_mode_result&);
  fmu_service_enter_initialization_mode_result& operator=(const fmu_service_enter_initialization_mode_result&);
  fmu_service_enter_initialization_mode_result() : success((Status::type)0) {
  }

  virtual ~fmu_service_enter_initialization_mode_result() noexcept;
  Status::type success;
  NoSuchInstanceException ex;

  _fmu_service_enter_initialization_mode_result__isset __isset;

  void __set_success(const Status::type val);

  void __set_ex(const NoSuchInstanceException& val);

  bool operator == (const fmu_service_enter_initialization_mode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_enter_initialization_mode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_enter_initialization_mode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_enter_initialization_mode_presult__isset {
  _fmu_service_enter_initialization_mode_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_enter_initialization_mode_presult__isset;

class fmu_service_enter_initialization_mode_presult {
 public:


  virtual ~fmu_service_enter_initialization_mode_presult() noexcept;
  Status::type* success;
  NoSuchInstanceException ex;

  _fmu_service_enter_initialization_mode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_exit_initialization_mode_args__isset {
  _fmu_service_exit_initialization_mode_args__isset() : instanceId(false) {}
  bool instanceId :1;
} _fmu_service_exit_initialization_mode_args__isset;

class fmu_service_exit_initialization_mode_args {
 public:

  fmu_service_exit_initialization_mode_args(const fmu_service_exit_initialization_mode_args&);
  fmu_service_exit_initialization_mode_args& operator=(const fmu_service_exit_initialization_mode_args&);
  fmu_service_exit_initialization_mode_args() : instanceId() {
  }

  virtual ~fmu_service_exit_initialization_mode_args() noexcept;
  InstanceId instanceId;

  _fmu_service_exit_initialization_mode_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  bool operator == (const fmu_service_exit_initialization_mode_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    return true;
  }
  bool operator != (const fmu_service_exit_initialization_mode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_exit_initialization_mode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_exit_initialization_mode_pargs {
 public:


  virtual ~fmu_service_exit_initialization_mode_pargs() noexcept;
  const InstanceId* instanceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_exit_initialization_mode_result__isset {
  _fmu_service_exit_initialization_mode_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_exit_initialization_mode_result__isset;

class fmu_service_exit_initialization_mode_result {
 public:

  fmu_service_exit_initialization_mode_result(const fmu_service_exit_initialization_mode_result&);
  fmu_service_exit_initialization_mode_result& operator=(const fmu_service_exit_initialization_mode_result&);
  fmu_service_exit_initialization_mode_result() : success((Status::type)0) {
  }

  virtual ~fmu_service_exit_initialization_mode_result() noexcept;
  Status::type success;
  NoSuchInstanceException ex;

  _fmu_service_exit_initialization_mode_result__isset __isset;

  void __set_success(const Status::type val);

  void __set_ex(const NoSuchInstanceException& val);

  bool operator == (const fmu_service_exit_initialization_mode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_exit_initialization_mode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_exit_initialization_mode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_exit_initialization_mode_presult__isset {
  _fmu_service_exit_initialization_mode_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_exit_initialization_mode_presult__isset;

class fmu_service_exit_initialization_mode_presult {
 public:


  virtual ~fmu_service_exit_initialization_mode_presult() noexcept;
  Status::type* success;
  NoSuchInstanceException ex;

  _fmu_service_exit_initialization_mode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_step_args__isset {
  _fmu_service_step_args__isset() : instanceId(false), stepSize(false) {}
  bool instanceId :1;
  bool stepSize :1;
} _fmu_service_step_args__isset;

class fmu_service_step_args {
 public:

  fmu_service_step_args(const fmu_service_step_args&);
  fmu_service_step_args& operator=(const fmu_service_step_args&);
  fmu_service_step_args() : instanceId(), stepSize(0) {
  }

  virtual ~fmu_service_step_args() noexcept;
  InstanceId instanceId;
  double stepSize;

  _fmu_service_step_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_stepSize(const double val);

  bool operator == (const fmu_service_step_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(stepSize == rhs.stepSize))
      return false;
    return true;
  }
  bool operator != (const fmu_service_step_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_step_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_step_pargs {
 public:


  virtual ~fmu_service_step_pargs() noexcept;
  const InstanceId* instanceId;
  const double* stepSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_step_result__isset {
  _fmu_service_step_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_step_result__isset;

class fmu_service_step_result {
 public:

  fmu_service_step_result(const fmu_service_step_result&);
  fmu_service_step_result& operator=(const fmu_service_step_result&);
  fmu_service_step_result() {
  }

  virtual ~fmu_service_step_result() noexcept;
  StepResult success;
  NoSuchInstanceException ex;

  _fmu_service_step_result__isset __isset;

  void __set_success(const StepResult& val);

  void __set_ex(const NoSuchInstanceException& val);

  bool operator == (const fmu_service_step_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_step_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_step_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_step_presult__isset {
  _fmu_service_step_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_step_presult__isset;

class fmu_service_step_presult {
 public:


  virtual ~fmu_service_step_presult() noexcept;
  StepResult* success;
  NoSuchInstanceException ex;

  _fmu_service_step_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_reset_args__isset {
  _fmu_service_reset_args__isset() : instanceId(false) {}
  bool instanceId :1;
} _fmu_service_reset_args__isset;

class fmu_service_reset_args {
 public:

  fmu_service_reset_args(const fmu_service_reset_args&);
  fmu_service_reset_args& operator=(const fmu_service_reset_args&);
  fmu_service_reset_args() : instanceId() {
  }

  virtual ~fmu_service_reset_args() noexcept;
  InstanceId instanceId;

  _fmu_service_reset_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  bool operator == (const fmu_service_reset_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    return true;
  }
  bool operator != (const fmu_service_reset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_reset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_reset_pargs {
 public:


  virtual ~fmu_service_reset_pargs() noexcept;
  const InstanceId* instanceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_reset_result__isset {
  _fmu_service_reset_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_reset_result__isset;

class fmu_service_reset_result {
 public:

  fmu_service_reset_result(const fmu_service_reset_result&);
  fmu_service_reset_result& operator=(const fmu_service_reset_result&);
  fmu_service_reset_result() : success((Status::type)0) {
  }

  virtual ~fmu_service_reset_result() noexcept;
  Status::type success;
  NoSuchInstanceException ex;

  _fmu_service_reset_result__isset __isset;

  void __set_success(const Status::type val);

  void __set_ex(const NoSuchInstanceException& val);

  bool operator == (const fmu_service_reset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_reset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_reset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_reset_presult__isset {
  _fmu_service_reset_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_reset_presult__isset;

class fmu_service_reset_presult {
 public:


  virtual ~fmu_service_reset_presult() noexcept;
  Status::type* success;
  NoSuchInstanceException ex;

  _fmu_service_reset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_terminate_args__isset {
  _fmu_service_terminate_args__isset() : instanceId(false) {}
  bool instanceId :1;
} _fmu_service_terminate_args__isset;

class fmu_service_terminate_args {
 public:

  fmu_service_terminate_args(const fmu_service_terminate_args&);
  fmu_service_terminate_args& operator=(const fmu_service_terminate_args&);
  fmu_service_terminate_args() : instanceId() {
  }

  virtual ~fmu_service_terminate_args() noexcept;
  InstanceId instanceId;

  _fmu_service_terminate_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  bool operator == (const fmu_service_terminate_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    return true;
  }
  bool operator != (const fmu_service_terminate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_terminate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_terminate_pargs {
 public:


  virtual ~fmu_service_terminate_pargs() noexcept;
  const InstanceId* instanceId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_terminate_result__isset {
  _fmu_service_terminate_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_terminate_result__isset;

class fmu_service_terminate_result {
 public:

  fmu_service_terminate_result(const fmu_service_terminate_result&);
  fmu_service_terminate_result& operator=(const fmu_service_terminate_result&);
  fmu_service_terminate_result() : success((Status::type)0) {
  }

  virtual ~fmu_service_terminate_result() noexcept;
  Status::type success;
  NoSuchInstanceException ex;

  _fmu_service_terminate_result__isset __isset;

  void __set_success(const Status::type val);

  void __set_ex(const NoSuchInstanceException& val);

  bool operator == (const fmu_service_terminate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const fmu_service_terminate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_terminate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_terminate_presult__isset {
  _fmu_service_terminate_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _fmu_service_terminate_presult__isset;

class fmu_service_terminate_presult {
 public:


  virtual ~fmu_service_terminate_presult() noexcept;
  Status::type* success;
  NoSuchInstanceException ex;

  _fmu_service_terminate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_read_integer_args__isset {
  _fmu_service_read_integer_args__isset() : instanceId(false), vr(false) {}
  bool instanceId :1;
  bool vr :1;
} _fmu_service_read_integer_args__isset;

class fmu_service_read_integer_args {
 public:

  fmu_service_read_integer_args(const fmu_service_read_integer_args&);
  fmu_service_read_integer_args& operator=(const fmu_service_read_integer_args&);
  fmu_service_read_integer_args() : instanceId() {
  }

  virtual ~fmu_service_read_integer_args() noexcept;
  InstanceId instanceId;
  ValueReferences vr;

  _fmu_service_read_integer_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_vr(const ValueReferences& val);

  bool operator == (const fmu_service_read_integer_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const fmu_service_read_integer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_read_integer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_read_integer_pargs {
 public:


  virtual ~fmu_service_read_integer_pargs() noexcept;
  const InstanceId* instanceId;
  const ValueReferences* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_read_integer_result__isset {
  _fmu_service_read_integer_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_read_integer_result__isset;

class fmu_service_read_integer_result {
 public:

  fmu_service_read_integer_result(const fmu_service_read_integer_result&);
  fmu_service_read_integer_result& operator=(const fmu_service_read_integer_result&);
  fmu_service_read_integer_result() {
  }

  virtual ~fmu_service_read_integer_result() noexcept;
  IntegerRead success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_read_integer_result__isset __isset;

  void __set_success(const IntegerRead& val);

  void __set_ex1(const NoSuchInstanceException& val);

  void __set_ex2(const NoSuchVariableException& val);

  bool operator == (const fmu_service_read_integer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_read_integer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_read_integer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_read_integer_presult__isset {
  _fmu_service_read_integer_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_read_integer_presult__isset;

class fmu_service_read_integer_presult {
 public:


  virtual ~fmu_service_read_integer_presult() noexcept;
  IntegerRead* success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_read_integer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_read_real_args__isset {
  _fmu_service_read_real_args__isset() : instanceId(false), vr(false) {}
  bool instanceId :1;
  bool vr :1;
} _fmu_service_read_real_args__isset;

class fmu_service_read_real_args {
 public:

  fmu_service_read_real_args(const fmu_service_read_real_args&);
  fmu_service_read_real_args& operator=(const fmu_service_read_real_args&);
  fmu_service_read_real_args() : instanceId() {
  }

  virtual ~fmu_service_read_real_args() noexcept;
  InstanceId instanceId;
  ValueReferences vr;

  _fmu_service_read_real_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_vr(const ValueReferences& val);

  bool operator == (const fmu_service_read_real_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const fmu_service_read_real_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_read_real_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_read_real_pargs {
 public:


  virtual ~fmu_service_read_real_pargs() noexcept;
  const InstanceId* instanceId;
  const ValueReferences* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_read_real_result__isset {
  _fmu_service_read_real_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_read_real_result__isset;

class fmu_service_read_real_result {
 public:

  fmu_service_read_real_result(const fmu_service_read_real_result&);
  fmu_service_read_real_result& operator=(const fmu_service_read_real_result&);
  fmu_service_read_real_result() {
  }

  virtual ~fmu_service_read_real_result() noexcept;
  RealRead success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_read_real_result__isset __isset;

  void __set_success(const RealRead& val);

  void __set_ex1(const NoSuchInstanceException& val);

  void __set_ex2(const NoSuchVariableException& val);

  bool operator == (const fmu_service_read_real_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_read_real_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_read_real_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_read_real_presult__isset {
  _fmu_service_read_real_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_read_real_presult__isset;

class fmu_service_read_real_presult {
 public:


  virtual ~fmu_service_read_real_presult() noexcept;
  RealRead* success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_read_real_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_read_string_args__isset {
  _fmu_service_read_string_args__isset() : instanceId(false), vr(false) {}
  bool instanceId :1;
  bool vr :1;
} _fmu_service_read_string_args__isset;

class fmu_service_read_string_args {
 public:

  fmu_service_read_string_args(const fmu_service_read_string_args&);
  fmu_service_read_string_args& operator=(const fmu_service_read_string_args&);
  fmu_service_read_string_args() : instanceId() {
  }

  virtual ~fmu_service_read_string_args() noexcept;
  InstanceId instanceId;
  ValueReferences vr;

  _fmu_service_read_string_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_vr(const ValueReferences& val);

  bool operator == (const fmu_service_read_string_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const fmu_service_read_string_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_read_string_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_read_string_pargs {
 public:


  virtual ~fmu_service_read_string_pargs() noexcept;
  const InstanceId* instanceId;
  const ValueReferences* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_read_string_result__isset {
  _fmu_service_read_string_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_read_string_result__isset;

class fmu_service_read_string_result {
 public:

  fmu_service_read_string_result(const fmu_service_read_string_result&);
  fmu_service_read_string_result& operator=(const fmu_service_read_string_result&);
  fmu_service_read_string_result() {
  }

  virtual ~fmu_service_read_string_result() noexcept;
  StringRead success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_read_string_result__isset __isset;

  void __set_success(const StringRead& val);

  void __set_ex1(const NoSuchInstanceException& val);

  void __set_ex2(const NoSuchVariableException& val);

  bool operator == (const fmu_service_read_string_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_read_string_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_read_string_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_read_string_presult__isset {
  _fmu_service_read_string_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_read_string_presult__isset;

class fmu_service_read_string_presult {
 public:


  virtual ~fmu_service_read_string_presult() noexcept;
  StringRead* success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_read_string_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_read_boolean_args__isset {
  _fmu_service_read_boolean_args__isset() : instanceId(false), vr(false) {}
  bool instanceId :1;
  bool vr :1;
} _fmu_service_read_boolean_args__isset;

class fmu_service_read_boolean_args {
 public:

  fmu_service_read_boolean_args(const fmu_service_read_boolean_args&);
  fmu_service_read_boolean_args& operator=(const fmu_service_read_boolean_args&);
  fmu_service_read_boolean_args() : instanceId() {
  }

  virtual ~fmu_service_read_boolean_args() noexcept;
  InstanceId instanceId;
  ValueReferences vr;

  _fmu_service_read_boolean_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_vr(const ValueReferences& val);

  bool operator == (const fmu_service_read_boolean_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(vr == rhs.vr))
      return false;
    return true;
  }
  bool operator != (const fmu_service_read_boolean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_read_boolean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_read_boolean_pargs {
 public:


  virtual ~fmu_service_read_boolean_pargs() noexcept;
  const InstanceId* instanceId;
  const ValueReferences* vr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_read_boolean_result__isset {
  _fmu_service_read_boolean_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_read_boolean_result__isset;

class fmu_service_read_boolean_result {
 public:

  fmu_service_read_boolean_result(const fmu_service_read_boolean_result&);
  fmu_service_read_boolean_result& operator=(const fmu_service_read_boolean_result&);
  fmu_service_read_boolean_result() {
  }

  virtual ~fmu_service_read_boolean_result() noexcept;
  BooleanRead success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_read_boolean_result__isset __isset;

  void __set_success(const BooleanRead& val);

  void __set_ex1(const NoSuchInstanceException& val);

  void __set_ex2(const NoSuchVariableException& val);

  bool operator == (const fmu_service_read_boolean_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_read_boolean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_read_boolean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_read_boolean_presult__isset {
  _fmu_service_read_boolean_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_read_boolean_presult__isset;

class fmu_service_read_boolean_presult {
 public:


  virtual ~fmu_service_read_boolean_presult() noexcept;
  BooleanRead* success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_read_boolean_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_write_integer_args__isset {
  _fmu_service_write_integer_args__isset() : instanceId(false), vr(false), value(false) {}
  bool instanceId :1;
  bool vr :1;
  bool value :1;
} _fmu_service_write_integer_args__isset;

class fmu_service_write_integer_args {
 public:

  fmu_service_write_integer_args(const fmu_service_write_integer_args&);
  fmu_service_write_integer_args& operator=(const fmu_service_write_integer_args&);
  fmu_service_write_integer_args() : instanceId() {
  }

  virtual ~fmu_service_write_integer_args() noexcept;
  InstanceId instanceId;
  ValueReferences vr;
  IntArray value;

  _fmu_service_write_integer_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_vr(const ValueReferences& val);

  void __set_value(const IntArray& val);

  bool operator == (const fmu_service_write_integer_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const fmu_service_write_integer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_write_integer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_write_integer_pargs {
 public:


  virtual ~fmu_service_write_integer_pargs() noexcept;
  const InstanceId* instanceId;
  const ValueReferences* vr;
  const IntArray* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_write_integer_result__isset {
  _fmu_service_write_integer_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_write_integer_result__isset;

class fmu_service_write_integer_result {
 public:

  fmu_service_write_integer_result(const fmu_service_write_integer_result&);
  fmu_service_write_integer_result& operator=(const fmu_service_write_integer_result&);
  fmu_service_write_integer_result() : success((Status::type)0) {
  }

  virtual ~fmu_service_write_integer_result() noexcept;
  Status::type success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_write_integer_result__isset __isset;

  void __set_success(const Status::type val);

  void __set_ex1(const NoSuchInstanceException& val);

  void __set_ex2(const NoSuchVariableException& val);

  bool operator == (const fmu_service_write_integer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_write_integer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_write_integer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_write_integer_presult__isset {
  _fmu_service_write_integer_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_write_integer_presult__isset;

class fmu_service_write_integer_presult {
 public:


  virtual ~fmu_service_write_integer_presult() noexcept;
  Status::type* success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_write_integer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_write_real_args__isset {
  _fmu_service_write_real_args__isset() : instanceId(false), vr(false), value(false) {}
  bool instanceId :1;
  bool vr :1;
  bool value :1;
} _fmu_service_write_real_args__isset;

class fmu_service_write_real_args {
 public:

  fmu_service_write_real_args(const fmu_service_write_real_args&);
  fmu_service_write_real_args& operator=(const fmu_service_write_real_args&);
  fmu_service_write_real_args() : instanceId() {
  }

  virtual ~fmu_service_write_real_args() noexcept;
  InstanceId instanceId;
  ValueReferences vr;
  RealArray value;

  _fmu_service_write_real_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_vr(const ValueReferences& val);

  void __set_value(const RealArray& val);

  bool operator == (const fmu_service_write_real_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const fmu_service_write_real_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_write_real_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_write_real_pargs {
 public:


  virtual ~fmu_service_write_real_pargs() noexcept;
  const InstanceId* instanceId;
  const ValueReferences* vr;
  const RealArray* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_write_real_result__isset {
  _fmu_service_write_real_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_write_real_result__isset;

class fmu_service_write_real_result {
 public:

  fmu_service_write_real_result(const fmu_service_write_real_result&);
  fmu_service_write_real_result& operator=(const fmu_service_write_real_result&);
  fmu_service_write_real_result() : success((Status::type)0) {
  }

  virtual ~fmu_service_write_real_result() noexcept;
  Status::type success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_write_real_result__isset __isset;

  void __set_success(const Status::type val);

  void __set_ex1(const NoSuchInstanceException& val);

  void __set_ex2(const NoSuchVariableException& val);

  bool operator == (const fmu_service_write_real_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_write_real_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_write_real_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_write_real_presult__isset {
  _fmu_service_write_real_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_write_real_presult__isset;

class fmu_service_write_real_presult {
 public:


  virtual ~fmu_service_write_real_presult() noexcept;
  Status::type* success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_write_real_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_write_string_args__isset {
  _fmu_service_write_string_args__isset() : instanceId(false), vr(false), value(false) {}
  bool instanceId :1;
  bool vr :1;
  bool value :1;
} _fmu_service_write_string_args__isset;

class fmu_service_write_string_args {
 public:

  fmu_service_write_string_args(const fmu_service_write_string_args&);
  fmu_service_write_string_args& operator=(const fmu_service_write_string_args&);
  fmu_service_write_string_args() : instanceId() {
  }

  virtual ~fmu_service_write_string_args() noexcept;
  InstanceId instanceId;
  ValueReferences vr;
  StringArray value;

  _fmu_service_write_string_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_vr(const ValueReferences& val);

  void __set_value(const StringArray& val);

  bool operator == (const fmu_service_write_string_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const fmu_service_write_string_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_write_string_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_write_string_pargs {
 public:


  virtual ~fmu_service_write_string_pargs() noexcept;
  const InstanceId* instanceId;
  const ValueReferences* vr;
  const StringArray* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_write_string_result__isset {
  _fmu_service_write_string_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_write_string_result__isset;

class fmu_service_write_string_result {
 public:

  fmu_service_write_string_result(const fmu_service_write_string_result&);
  fmu_service_write_string_result& operator=(const fmu_service_write_string_result&);
  fmu_service_write_string_result() : success((Status::type)0) {
  }

  virtual ~fmu_service_write_string_result() noexcept;
  Status::type success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_write_string_result__isset __isset;

  void __set_success(const Status::type val);

  void __set_ex1(const NoSuchInstanceException& val);

  void __set_ex2(const NoSuchVariableException& val);

  bool operator == (const fmu_service_write_string_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_write_string_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_write_string_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_write_string_presult__isset {
  _fmu_service_write_string_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_write_string_presult__isset;

class fmu_service_write_string_presult {
 public:


  virtual ~fmu_service_write_string_presult() noexcept;
  Status::type* success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_write_string_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_write_boolean_args__isset {
  _fmu_service_write_boolean_args__isset() : instanceId(false), vr(false), value(false) {}
  bool instanceId :1;
  bool vr :1;
  bool value :1;
} _fmu_service_write_boolean_args__isset;

class fmu_service_write_boolean_args {
 public:

  fmu_service_write_boolean_args(const fmu_service_write_boolean_args&);
  fmu_service_write_boolean_args& operator=(const fmu_service_write_boolean_args&);
  fmu_service_write_boolean_args() : instanceId() {
  }

  virtual ~fmu_service_write_boolean_args() noexcept;
  InstanceId instanceId;
  ValueReferences vr;
  BooleanArray value;

  _fmu_service_write_boolean_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_vr(const ValueReferences& val);

  void __set_value(const BooleanArray& val);

  bool operator == (const fmu_service_write_boolean_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const fmu_service_write_boolean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_write_boolean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_write_boolean_pargs {
 public:


  virtual ~fmu_service_write_boolean_pargs() noexcept;
  const InstanceId* instanceId;
  const ValueReferences* vr;
  const BooleanArray* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_write_boolean_result__isset {
  _fmu_service_write_boolean_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_write_boolean_result__isset;

class fmu_service_write_boolean_result {
 public:

  fmu_service_write_boolean_result(const fmu_service_write_boolean_result&);
  fmu_service_write_boolean_result& operator=(const fmu_service_write_boolean_result&);
  fmu_service_write_boolean_result() : success((Status::type)0) {
  }

  virtual ~fmu_service_write_boolean_result() noexcept;
  Status::type success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_write_boolean_result__isset __isset;

  void __set_success(const Status::type val);

  void __set_ex1(const NoSuchInstanceException& val);

  void __set_ex2(const NoSuchVariableException& val);

  bool operator == (const fmu_service_write_boolean_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_write_boolean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_write_boolean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_write_boolean_presult__isset {
  _fmu_service_write_boolean_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_write_boolean_presult__isset;

class fmu_service_write_boolean_presult {
 public:


  virtual ~fmu_service_write_boolean_presult() noexcept;
  Status::type* success;
  NoSuchInstanceException ex1;
  NoSuchVariableException ex2;

  _fmu_service_write_boolean_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fmu_service_get_directional_derivative_args__isset {
  _fmu_service_get_directional_derivative_args__isset() : instanceId(false), vUnknownRef(false), vKnownRef(false), dvKnownRef(false) {}
  bool instanceId :1;
  bool vUnknownRef :1;
  bool vKnownRef :1;
  bool dvKnownRef :1;
} _fmu_service_get_directional_derivative_args__isset;

class fmu_service_get_directional_derivative_args {
 public:

  fmu_service_get_directional_derivative_args(const fmu_service_get_directional_derivative_args&);
  fmu_service_get_directional_derivative_args& operator=(const fmu_service_get_directional_derivative_args&);
  fmu_service_get_directional_derivative_args() : instanceId() {
  }

  virtual ~fmu_service_get_directional_derivative_args() noexcept;
  InstanceId instanceId;
  ValueReferences vUnknownRef;
  ValueReferences vKnownRef;
  std::vector<double>  dvKnownRef;

  _fmu_service_get_directional_derivative_args__isset __isset;

  void __set_instanceId(const InstanceId& val);

  void __set_vUnknownRef(const ValueReferences& val);

  void __set_vKnownRef(const ValueReferences& val);

  void __set_dvKnownRef(const std::vector<double> & val);

  bool operator == (const fmu_service_get_directional_derivative_args & rhs) const
  {
    if (!(instanceId == rhs.instanceId))
      return false;
    if (!(vUnknownRef == rhs.vUnknownRef))
      return false;
    if (!(vKnownRef == rhs.vKnownRef))
      return false;
    if (!(dvKnownRef == rhs.dvKnownRef))
      return false;
    return true;
  }
  bool operator != (const fmu_service_get_directional_derivative_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_get_directional_derivative_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fmu_service_get_directional_derivative_pargs {
 public:


  virtual ~fmu_service_get_directional_derivative_pargs() noexcept;
  const InstanceId* instanceId;
  const ValueReferences* vUnknownRef;
  const ValueReferences* vKnownRef;
  const std::vector<double> * dvKnownRef;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_get_directional_derivative_result__isset {
  _fmu_service_get_directional_derivative_result__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_get_directional_derivative_result__isset;

class fmu_service_get_directional_derivative_result {
 public:

  fmu_service_get_directional_derivative_result(const fmu_service_get_directional_derivative_result&);
  fmu_service_get_directional_derivative_result& operator=(const fmu_service_get_directional_derivative_result&);
  fmu_service_get_directional_derivative_result() {
  }

  virtual ~fmu_service_get_directional_derivative_result() noexcept;
  DirectionalDerivativeResult success;
  NoSuchInstanceException ex1;
  UnsupportedOperationException ex2;

  _fmu_service_get_directional_derivative_result__isset __isset;

  void __set_success(const DirectionalDerivativeResult& val);

  void __set_ex1(const NoSuchInstanceException& val);

  void __set_ex2(const UnsupportedOperationException& val);

  bool operator == (const fmu_service_get_directional_derivative_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex1 == rhs.ex1))
      return false;
    if (!(ex2 == rhs.ex2))
      return false;
    return true;
  }
  bool operator != (const fmu_service_get_directional_derivative_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fmu_service_get_directional_derivative_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fmu_service_get_directional_derivative_presult__isset {
  _fmu_service_get_directional_derivative_presult__isset() : success(false), ex1(false), ex2(false) {}
  bool success :1;
  bool ex1 :1;
  bool ex2 :1;
} _fmu_service_get_directional_derivative_presult__isset;

class fmu_service_get_directional_derivative_presult {
 public:


  virtual ~fmu_service_get_directional_derivative_presult() noexcept;
  DirectionalDerivativeResult* success;
  NoSuchInstanceException ex1;
  UnsupportedOperationException ex2;

  _fmu_service_get_directional_derivative_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class fmu_serviceClient : virtual public fmu_serviceIf {
 public:
  fmu_serviceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  fmu_serviceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void load_from_url(FmuId& _return, const std::string& url);
  void send_load_from_url(const std::string& url);
  void recv_load_from_url(FmuId& _return);
  void load_from_file(FmuId& _return, const std::string& name, const std::string& data);
  void send_load_from_file(const std::string& name, const std::string& data);
  void recv_load_from_file(FmuId& _return);
  void get_model_description(ModelDescription& _return, const FmuId& fmuId);
  void send_get_model_description(const FmuId& fmuId);
  void recv_get_model_description(ModelDescription& _return);
  void get_co_simulation_attributes(CoSimulationAttributes& _return, const InstanceId& instanceId);
  void send_get_co_simulation_attributes(const InstanceId& instanceId);
  void recv_get_co_simulation_attributes(CoSimulationAttributes& _return);
  bool can_create_instance_from_cs(const FmuId& fmuId);
  void send_can_create_instance_from_cs(const FmuId& fmuId);
  bool recv_can_create_instance_from_cs();
  bool can_create_instance_from_me(const FmuId& fmuId);
  void send_can_create_instance_from_me(const FmuId& fmuId);
  bool recv_can_create_instance_from_me();
  void create_instance_from_cs(InstanceId& _return, const FmuId& fmuId);
  void send_create_instance_from_cs(const FmuId& fmuId);
  void recv_create_instance_from_cs(InstanceId& _return);
  void create_instance_from_me(InstanceId& _return, const FmuId& fmuId, const Solver& solver);
  void send_create_instance_from_me(const FmuId& fmuId, const Solver& solver);
  void recv_create_instance_from_me(InstanceId& _return);
  Status::type setup_experiment(const InstanceId& instanceId, const double start, const double stop, const double tolerance);
  void send_setup_experiment(const InstanceId& instanceId, const double start, const double stop, const double tolerance);
  Status::type recv_setup_experiment();
  Status::type enter_initialization_mode(const InstanceId& instanceId);
  void send_enter_initialization_mode(const InstanceId& instanceId);
  Status::type recv_enter_initialization_mode();
  Status::type exit_initialization_mode(const InstanceId& instanceId);
  void send_exit_initialization_mode(const InstanceId& instanceId);
  Status::type recv_exit_initialization_mode();
  void step(StepResult& _return, const InstanceId& instanceId, const double stepSize);
  void send_step(const InstanceId& instanceId, const double stepSize);
  void recv_step(StepResult& _return);
  Status::type reset(const InstanceId& instanceId);
  void send_reset(const InstanceId& instanceId);
  Status::type recv_reset();
  Status::type terminate(const InstanceId& instanceId);
  void send_terminate(const InstanceId& instanceId);
  Status::type recv_terminate();
  void read_integer(IntegerRead& _return, const InstanceId& instanceId, const ValueReferences& vr);
  void send_read_integer(const InstanceId& instanceId, const ValueReferences& vr);
  void recv_read_integer(IntegerRead& _return);
  void read_real(RealRead& _return, const InstanceId& instanceId, const ValueReferences& vr);
  void send_read_real(const InstanceId& instanceId, const ValueReferences& vr);
  void recv_read_real(RealRead& _return);
  void read_string(StringRead& _return, const InstanceId& instanceId, const ValueReferences& vr);
  void send_read_string(const InstanceId& instanceId, const ValueReferences& vr);
  void recv_read_string(StringRead& _return);
  void read_boolean(BooleanRead& _return, const InstanceId& instanceId, const ValueReferences& vr);
  void send_read_boolean(const InstanceId& instanceId, const ValueReferences& vr);
  void recv_read_boolean(BooleanRead& _return);
  Status::type write_integer(const InstanceId& instanceId, const ValueReferences& vr, const IntArray& value);
  void send_write_integer(const InstanceId& instanceId, const ValueReferences& vr, const IntArray& value);
  Status::type recv_write_integer();
  Status::type write_real(const InstanceId& instanceId, const ValueReferences& vr, const RealArray& value);
  void send_write_real(const InstanceId& instanceId, const ValueReferences& vr, const RealArray& value);
  Status::type recv_write_real();
  Status::type write_string(const InstanceId& instanceId, const ValueReferences& vr, const StringArray& value);
  void send_write_string(const InstanceId& instanceId, const ValueReferences& vr, const StringArray& value);
  Status::type recv_write_string();
  Status::type write_boolean(const InstanceId& instanceId, const ValueReferences& vr, const BooleanArray& value);
  void send_write_boolean(const InstanceId& instanceId, const ValueReferences& vr, const BooleanArray& value);
  Status::type recv_write_boolean();
  void get_directional_derivative(DirectionalDerivativeResult& _return, const InstanceId& instanceId, const ValueReferences& vUnknownRef, const ValueReferences& vKnownRef, const std::vector<double> & dvKnownRef);
  void send_get_directional_derivative(const InstanceId& instanceId, const ValueReferences& vUnknownRef, const ValueReferences& vKnownRef, const std::vector<double> & dvKnownRef);
  void recv_get_directional_derivative(DirectionalDerivativeResult& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class fmu_serviceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<fmu_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (fmu_serviceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_load_from_url(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load_from_file(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_model_description(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_co_simulation_attributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_can_create_instance_from_cs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_can_create_instance_from_me(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_instance_from_cs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_instance_from_me(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setup_experiment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enter_initialization_mode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exit_initialization_mode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_step(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_integer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_real(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_boolean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write_integer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write_real(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write_boolean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_directional_derivative(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  fmu_serviceProcessor(::std::shared_ptr<fmu_serviceIf> iface) :
    iface_(iface) {
    processMap_["load_from_url"] = &fmu_serviceProcessor::process_load_from_url;
    processMap_["load_from_file"] = &fmu_serviceProcessor::process_load_from_file;
    processMap_["get_model_description"] = &fmu_serviceProcessor::process_get_model_description;
    processMap_["get_co_simulation_attributes"] = &fmu_serviceProcessor::process_get_co_simulation_attributes;
    processMap_["can_create_instance_from_cs"] = &fmu_serviceProcessor::process_can_create_instance_from_cs;
    processMap_["can_create_instance_from_me"] = &fmu_serviceProcessor::process_can_create_instance_from_me;
    processMap_["create_instance_from_cs"] = &fmu_serviceProcessor::process_create_instance_from_cs;
    processMap_["create_instance_from_me"] = &fmu_serviceProcessor::process_create_instance_from_me;
    processMap_["setup_experiment"] = &fmu_serviceProcessor::process_setup_experiment;
    processMap_["enter_initialization_mode"] = &fmu_serviceProcessor::process_enter_initialization_mode;
    processMap_["exit_initialization_mode"] = &fmu_serviceProcessor::process_exit_initialization_mode;
    processMap_["step"] = &fmu_serviceProcessor::process_step;
    processMap_["reset"] = &fmu_serviceProcessor::process_reset;
    processMap_["terminate"] = &fmu_serviceProcessor::process_terminate;
    processMap_["read_integer"] = &fmu_serviceProcessor::process_read_integer;
    processMap_["read_real"] = &fmu_serviceProcessor::process_read_real;
    processMap_["read_string"] = &fmu_serviceProcessor::process_read_string;
    processMap_["read_boolean"] = &fmu_serviceProcessor::process_read_boolean;
    processMap_["write_integer"] = &fmu_serviceProcessor::process_write_integer;
    processMap_["write_real"] = &fmu_serviceProcessor::process_write_real;
    processMap_["write_string"] = &fmu_serviceProcessor::process_write_string;
    processMap_["write_boolean"] = &fmu_serviceProcessor::process_write_boolean;
    processMap_["get_directional_derivative"] = &fmu_serviceProcessor::process_get_directional_derivative;
  }

  virtual ~fmu_serviceProcessor() {}
};

class fmu_serviceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  fmu_serviceProcessorFactory(const ::std::shared_ptr< fmu_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< fmu_serviceIfFactory > handlerFactory_;
};

class fmu_serviceMultiface : virtual public fmu_serviceIf {
 public:
  fmu_serviceMultiface(std::vector<std::shared_ptr<fmu_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~fmu_serviceMultiface() {}
 protected:
  std::vector<std::shared_ptr<fmu_serviceIf> > ifaces_;
  fmu_serviceMultiface() {}
  void add(::std::shared_ptr<fmu_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void load_from_url(FmuId& _return, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_from_url(_return, url);
    }
    ifaces_[i]->load_from_url(_return, url);
    return;
  }

  void load_from_file(FmuId& _return, const std::string& name, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load_from_file(_return, name, data);
    }
    ifaces_[i]->load_from_file(_return, name, data);
    return;
  }

  void get_model_description(ModelDescription& _return, const FmuId& fmuId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_model_description(_return, fmuId);
    }
    ifaces_[i]->get_model_description(_return, fmuId);
    return;
  }

  void get_co_simulation_attributes(CoSimulationAttributes& _return, const InstanceId& instanceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_co_simulation_attributes(_return, instanceId);
    }
    ifaces_[i]->get_co_simulation_attributes(_return, instanceId);
    return;
  }

  bool can_create_instance_from_cs(const FmuId& fmuId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->can_create_instance_from_cs(fmuId);
    }
    return ifaces_[i]->can_create_instance_from_cs(fmuId);
  }

  bool can_create_instance_from_me(const FmuId& fmuId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->can_create_instance_from_me(fmuId);
    }
    return ifaces_[i]->can_create_instance_from_me(fmuId);
  }

  void create_instance_from_cs(InstanceId& _return, const FmuId& fmuId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_instance_from_cs(_return, fmuId);
    }
    ifaces_[i]->create_instance_from_cs(_return, fmuId);
    return;
  }

  void create_instance_from_me(InstanceId& _return, const FmuId& fmuId, const Solver& solver) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_instance_from_me(_return, fmuId, solver);
    }
    ifaces_[i]->create_instance_from_me(_return, fmuId, solver);
    return;
  }

  Status::type setup_experiment(const InstanceId& instanceId, const double start, const double stop, const double tolerance) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setup_experiment(instanceId, start, stop, tolerance);
    }
    return ifaces_[i]->setup_experiment(instanceId, start, stop, tolerance);
  }

  Status::type enter_initialization_mode(const InstanceId& instanceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enter_initialization_mode(instanceId);
    }
    return ifaces_[i]->enter_initialization_mode(instanceId);
  }

  Status::type exit_initialization_mode(const InstanceId& instanceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exit_initialization_mode(instanceId);
    }
    return ifaces_[i]->exit_initialization_mode(instanceId);
  }

  void step(StepResult& _return, const InstanceId& instanceId, const double stepSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->step(_return, instanceId, stepSize);
    }
    ifaces_[i]->step(_return, instanceId, stepSize);
    return;
  }

  Status::type reset(const InstanceId& instanceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reset(instanceId);
    }
    return ifaces_[i]->reset(instanceId);
  }

  Status::type terminate(const InstanceId& instanceId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminate(instanceId);
    }
    return ifaces_[i]->terminate(instanceId);
  }

  void read_integer(IntegerRead& _return, const InstanceId& instanceId, const ValueReferences& vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_integer(_return, instanceId, vr);
    }
    ifaces_[i]->read_integer(_return, instanceId, vr);
    return;
  }

  void read_real(RealRead& _return, const InstanceId& instanceId, const ValueReferences& vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_real(_return, instanceId, vr);
    }
    ifaces_[i]->read_real(_return, instanceId, vr);
    return;
  }

  void read_string(StringRead& _return, const InstanceId& instanceId, const ValueReferences& vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_string(_return, instanceId, vr);
    }
    ifaces_[i]->read_string(_return, instanceId, vr);
    return;
  }

  void read_boolean(BooleanRead& _return, const InstanceId& instanceId, const ValueReferences& vr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_boolean(_return, instanceId, vr);
    }
    ifaces_[i]->read_boolean(_return, instanceId, vr);
    return;
  }

  Status::type write_integer(const InstanceId& instanceId, const ValueReferences& vr, const IntArray& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write_integer(instanceId, vr, value);
    }
    return ifaces_[i]->write_integer(instanceId, vr, value);
  }

  Status::type write_real(const InstanceId& instanceId, const ValueReferences& vr, const RealArray& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write_real(instanceId, vr, value);
    }
    return ifaces_[i]->write_real(instanceId, vr, value);
  }

  Status::type write_string(const InstanceId& instanceId, const ValueReferences& vr, const StringArray& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write_string(instanceId, vr, value);
    }
    return ifaces_[i]->write_string(instanceId, vr, value);
  }

  Status::type write_boolean(const InstanceId& instanceId, const ValueReferences& vr, const BooleanArray& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write_boolean(instanceId, vr, value);
    }
    return ifaces_[i]->write_boolean(instanceId, vr, value);
  }

  void get_directional_derivative(DirectionalDerivativeResult& _return, const InstanceId& instanceId, const ValueReferences& vUnknownRef, const ValueReferences& vKnownRef, const std::vector<double> & dvKnownRef) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_directional_derivative(_return, instanceId, vUnknownRef, vKnownRef, dvKnownRef);
    }
    ifaces_[i]->get_directional_derivative(_return, instanceId, vUnknownRef, vKnownRef, dvKnownRef);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class fmu_serviceConcurrentClient : virtual public fmu_serviceIf {
 public:
  fmu_serviceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  fmu_serviceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void load_from_url(FmuId& _return, const std::string& url);
  int32_t send_load_from_url(const std::string& url);
  void recv_load_from_url(FmuId& _return, const int32_t seqid);
  void load_from_file(FmuId& _return, const std::string& name, const std::string& data);
  int32_t send_load_from_file(const std::string& name, const std::string& data);
  void recv_load_from_file(FmuId& _return, const int32_t seqid);
  void get_model_description(ModelDescription& _return, const FmuId& fmuId);
  int32_t send_get_model_description(const FmuId& fmuId);
  void recv_get_model_description(ModelDescription& _return, const int32_t seqid);
  void get_co_simulation_attributes(CoSimulationAttributes& _return, const InstanceId& instanceId);
  int32_t send_get_co_simulation_attributes(const InstanceId& instanceId);
  void recv_get_co_simulation_attributes(CoSimulationAttributes& _return, const int32_t seqid);
  bool can_create_instance_from_cs(const FmuId& fmuId);
  int32_t send_can_create_instance_from_cs(const FmuId& fmuId);
  bool recv_can_create_instance_from_cs(const int32_t seqid);
  bool can_create_instance_from_me(const FmuId& fmuId);
  int32_t send_can_create_instance_from_me(const FmuId& fmuId);
  bool recv_can_create_instance_from_me(const int32_t seqid);
  void create_instance_from_cs(InstanceId& _return, const FmuId& fmuId);
  int32_t send_create_instance_from_cs(const FmuId& fmuId);
  void recv_create_instance_from_cs(InstanceId& _return, const int32_t seqid);
  void create_instance_from_me(InstanceId& _return, const FmuId& fmuId, const Solver& solver);
  int32_t send_create_instance_from_me(const FmuId& fmuId, const Solver& solver);
  void recv_create_instance_from_me(InstanceId& _return, const int32_t seqid);
  Status::type setup_experiment(const InstanceId& instanceId, const double start, const double stop, const double tolerance);
  int32_t send_setup_experiment(const InstanceId& instanceId, const double start, const double stop, const double tolerance);
  Status::type recv_setup_experiment(const int32_t seqid);
  Status::type enter_initialization_mode(const InstanceId& instanceId);
  int32_t send_enter_initialization_mode(const InstanceId& instanceId);
  Status::type recv_enter_initialization_mode(const int32_t seqid);
  Status::type exit_initialization_mode(const InstanceId& instanceId);
  int32_t send_exit_initialization_mode(const InstanceId& instanceId);
  Status::type recv_exit_initialization_mode(const int32_t seqid);
  void step(StepResult& _return, const InstanceId& instanceId, const double stepSize);
  int32_t send_step(const InstanceId& instanceId, const double stepSize);
  void recv_step(StepResult& _return, const int32_t seqid);
  Status::type reset(const InstanceId& instanceId);
  int32_t send_reset(const InstanceId& instanceId);
  Status::type recv_reset(const int32_t seqid);
  Status::type terminate(const InstanceId& instanceId);
  int32_t send_terminate(const InstanceId& instanceId);
  Status::type recv_terminate(const int32_t seqid);
  void read_integer(IntegerRead& _return, const InstanceId& instanceId, const ValueReferences& vr);
  int32_t send_read_integer(const InstanceId& instanceId, const ValueReferences& vr);
  void recv_read_integer(IntegerRead& _return, const int32_t seqid);
  void read_real(RealRead& _return, const InstanceId& instanceId, const ValueReferences& vr);
  int32_t send_read_real(const InstanceId& instanceId, const ValueReferences& vr);
  void recv_read_real(RealRead& _return, const int32_t seqid);
  void read_string(StringRead& _return, const InstanceId& instanceId, const ValueReferences& vr);
  int32_t send_read_string(const InstanceId& instanceId, const ValueReferences& vr);
  void recv_read_string(StringRead& _return, const int32_t seqid);
  void read_boolean(BooleanRead& _return, const InstanceId& instanceId, const ValueReferences& vr);
  int32_t send_read_boolean(const InstanceId& instanceId, const ValueReferences& vr);
  void recv_read_boolean(BooleanRead& _return, const int32_t seqid);
  Status::type write_integer(const InstanceId& instanceId, const ValueReferences& vr, const IntArray& value);
  int32_t send_write_integer(const InstanceId& instanceId, const ValueReferences& vr, const IntArray& value);
  Status::type recv_write_integer(const int32_t seqid);
  Status::type write_real(const InstanceId& instanceId, const ValueReferences& vr, const RealArray& value);
  int32_t send_write_real(const InstanceId& instanceId, const ValueReferences& vr, const RealArray& value);
  Status::type recv_write_real(const int32_t seqid);
  Status::type write_string(const InstanceId& instanceId, const ValueReferences& vr, const StringArray& value);
  int32_t send_write_string(const InstanceId& instanceId, const ValueReferences& vr, const StringArray& value);
  Status::type recv_write_string(const int32_t seqid);
  Status::type write_boolean(const InstanceId& instanceId, const ValueReferences& vr, const BooleanArray& value);
  int32_t send_write_boolean(const InstanceId& instanceId, const ValueReferences& vr, const BooleanArray& value);
  Status::type recv_write_boolean(const int32_t seqid);
  void get_directional_derivative(DirectionalDerivativeResult& _return, const InstanceId& instanceId, const ValueReferences& vUnknownRef, const ValueReferences& vKnownRef, const std::vector<double> & dvKnownRef);
  int32_t send_get_directional_derivative(const InstanceId& instanceId, const ValueReferences& vUnknownRef, const ValueReferences& vKnownRef, const std::vector<double> & dvKnownRef);
  void recv_get_directional_derivative(DirectionalDerivativeResult& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

typedef fmu_serviceIf fmu_service_if;
typedef fmu_serviceClient fmu_service_client;
typedef fmu_serviceConcurrentClient fmu_service_concurrent_client;
typedef fmu_serviceProcessor fmu_service_processor;
}} // namespace

#endif
